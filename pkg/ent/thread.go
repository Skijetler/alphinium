// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/Skijetler/alphinium/pkg/ent/post"
	"github.com/Skijetler/alphinium/pkg/ent/subcategory"
	"github.com/Skijetler/alphinium/pkg/ent/thread"
)

// Thread is the model entity for the Thread schema.
type Thread struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// DescriptionID holds the value of the "description_id" field.
	DescriptionID uint64 `json:"description_id,omitempty"`
	// SubcategoryID holds the value of the "subcategory_id" field.
	SubcategoryID uint64 `json:"subcategory_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ThreadQuery when eager-loading is set.
	Edges ThreadEdges `json:"edges"`
}

// ThreadEdges holds the relations/edges for other nodes in the graph.
type ThreadEdges struct {
	// Subcategory holds the value of the subcategory edge.
	Subcategory *Subcategory `json:"subcategory,omitempty"`
	// Description holds the value of the description edge.
	Description *Post `json:"description,omitempty"`
	// Posts holds the value of the posts edge.
	Posts []*Post `json:"posts,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// SubcategoryOrErr returns the Subcategory value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ThreadEdges) SubcategoryOrErr() (*Subcategory, error) {
	if e.loadedTypes[0] {
		if e.Subcategory == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: subcategory.Label}
		}
		return e.Subcategory, nil
	}
	return nil, &NotLoadedError{edge: "subcategory"}
}

// DescriptionOrErr returns the Description value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ThreadEdges) DescriptionOrErr() (*Post, error) {
	if e.loadedTypes[1] {
		if e.Description == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: post.Label}
		}
		return e.Description, nil
	}
	return nil, &NotLoadedError{edge: "description"}
}

// PostsOrErr returns the Posts value or an error if the edge
// was not loaded in eager-loading.
func (e ThreadEdges) PostsOrErr() ([]*Post, error) {
	if e.loadedTypes[2] {
		return e.Posts, nil
	}
	return nil, &NotLoadedError{edge: "posts"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Thread) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case thread.FieldID, thread.FieldDescriptionID, thread.FieldSubcategoryID:
			values[i] = new(sql.NullInt64)
		case thread.FieldName:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Thread", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Thread fields.
func (t *Thread) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case thread.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = uint64(value.Int64)
		case thread.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				t.Name = value.String
			}
		case thread.FieldDescriptionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field description_id", values[i])
			} else if value.Valid {
				t.DescriptionID = uint64(value.Int64)
			}
		case thread.FieldSubcategoryID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field subcategory_id", values[i])
			} else if value.Valid {
				t.SubcategoryID = uint64(value.Int64)
			}
		}
	}
	return nil
}

// QuerySubcategory queries the "subcategory" edge of the Thread entity.
func (t *Thread) QuerySubcategory() *SubcategoryQuery {
	return (&ThreadClient{config: t.config}).QuerySubcategory(t)
}

// QueryDescription queries the "description" edge of the Thread entity.
func (t *Thread) QueryDescription() *PostQuery {
	return (&ThreadClient{config: t.config}).QueryDescription(t)
}

// QueryPosts queries the "posts" edge of the Thread entity.
func (t *Thread) QueryPosts() *PostQuery {
	return (&ThreadClient{config: t.config}).QueryPosts(t)
}

// Update returns a builder for updating this Thread.
// Note that you need to call Thread.Unwrap() before calling this method if this Thread
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Thread) Update() *ThreadUpdateOne {
	return (&ThreadClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the Thread entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Thread) Unwrap() *Thread {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Thread is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Thread) String() string {
	var builder strings.Builder
	builder.WriteString("Thread(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("name=")
	builder.WriteString(t.Name)
	builder.WriteString(", ")
	builder.WriteString("description_id=")
	builder.WriteString(fmt.Sprintf("%v", t.DescriptionID))
	builder.WriteString(", ")
	builder.WriteString("subcategory_id=")
	builder.WriteString(fmt.Sprintf("%v", t.SubcategoryID))
	builder.WriteByte(')')
	return builder.String()
}

// Threads is a parsable slice of Thread.
type Threads []*Thread

func (t Threads) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
