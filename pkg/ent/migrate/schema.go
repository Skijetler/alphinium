// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AttachmentsColumns holds the columns for the "attachments" table.
	AttachmentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "link", Type: field.TypeString},
		{Name: "name", Type: field.TypeString},
		{Name: "size", Type: field.TypeString},
		{Name: "type", Type: field.TypeString},
		{Name: "hash", Type: field.TypeString},
		{Name: "post_id", Type: field.TypeUint64, Nullable: true},
		{Name: "user_id", Type: field.TypeUint64},
	}
	// AttachmentsTable holds the schema information for the "attachments" table.
	AttachmentsTable = &schema.Table{
		Name:       "attachments",
		Columns:    AttachmentsColumns,
		PrimaryKey: []*schema.Column{AttachmentsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "attachments_posts_attachments",
				Columns:    []*schema.Column{AttachmentsColumns[6]},
				RefColumns: []*schema.Column{PostsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "attachments_users_attachments",
				Columns:    []*schema.Column{AttachmentsColumns[7]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// CategoriesColumns holds the columns for the "categories" table.
	CategoriesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "name", Type: field.TypeString},
	}
	// CategoriesTable holds the schema information for the "categories" table.
	CategoriesTable = &schema.Table{
		Name:       "categories",
		Columns:    CategoriesColumns,
		PrimaryKey: []*schema.Column{CategoriesColumns[0]},
	}
	// PostsColumns holds the columns for the "posts" table.
	PostsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "message", Type: field.TypeString},
		{Name: "date", Type: field.TypeTime},
		{Name: "thread_id", Type: field.TypeUint64},
		{Name: "user_id", Type: field.TypeUint64},
	}
	// PostsTable holds the schema information for the "posts" table.
	PostsTable = &schema.Table{
		Name:       "posts",
		Columns:    PostsColumns,
		PrimaryKey: []*schema.Column{PostsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "posts_threads_posts",
				Columns:    []*schema.Column{PostsColumns[3]},
				RefColumns: []*schema.Column{ThreadsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "posts_users_posts",
				Columns:    []*schema.Column{PostsColumns[4]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// SubcategoriesColumns holds the columns for the "subcategories" table.
	SubcategoriesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString},
		{Name: "category_id", Type: field.TypeUint64},
	}
	// SubcategoriesTable holds the schema information for the "subcategories" table.
	SubcategoriesTable = &schema.Table{
		Name:       "subcategories",
		Columns:    SubcategoriesColumns,
		PrimaryKey: []*schema.Column{SubcategoriesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "subcategories_categories_subcategories",
				Columns:    []*schema.Column{SubcategoriesColumns[3]},
				RefColumns: []*schema.Column{CategoriesColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// ThreadsColumns holds the columns for the "threads" table.
	ThreadsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "subcategory_id", Type: field.TypeUint64},
		{Name: "description_id", Type: field.TypeUint64},
	}
	// ThreadsTable holds the schema information for the "threads" table.
	ThreadsTable = &schema.Table{
		Name:       "threads",
		Columns:    ThreadsColumns,
		PrimaryKey: []*schema.Column{ThreadsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "threads_subcategories_threads",
				Columns:    []*schema.Column{ThreadsColumns[2]},
				RefColumns: []*schema.Column{SubcategoriesColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "threads_posts_description",
				Columns:    []*schema.Column{ThreadsColumns[3]},
				RefColumns: []*schema.Column{PostsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "email", Type: field.TypeString, Unique: true},
		{Name: "password", Type: field.TypeString},
		{Name: "registration_date", Type: field.TypeTime},
		{Name: "disabled", Type: field.TypeBool, Default: false},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// UserMetadataColumns holds the columns for the "user_metadata" table.
	UserMetadataColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "color", Type: field.TypeString},
		{Name: "title", Type: field.TypeString},
		{Name: "gender", Type: field.TypeString},
		{Name: "last_online", Type: field.TypeTime},
		{Name: "user_id", Type: field.TypeUint64, Unique: true},
	}
	// UserMetadataTable holds the schema information for the "user_metadata" table.
	UserMetadataTable = &schema.Table{
		Name:       "user_metadata",
		Columns:    UserMetadataColumns,
		PrimaryKey: []*schema.Column{UserMetadataColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_metadata_users_metadata",
				Columns:    []*schema.Column{UserMetadataColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AttachmentsTable,
		CategoriesTable,
		PostsTable,
		SubcategoriesTable,
		ThreadsTable,
		UsersTable,
		UserMetadataTable,
	}
)

func init() {
	AttachmentsTable.ForeignKeys[0].RefTable = PostsTable
	AttachmentsTable.ForeignKeys[1].RefTable = UsersTable
	PostsTable.ForeignKeys[0].RefTable = ThreadsTable
	PostsTable.ForeignKeys[1].RefTable = UsersTable
	SubcategoriesTable.ForeignKeys[0].RefTable = CategoriesTable
	ThreadsTable.ForeignKeys[0].RefTable = SubcategoriesTable
	ThreadsTable.ForeignKeys[1].RefTable = PostsTable
	UserMetadataTable.ForeignKeys[0].RefTable = UsersTable
}
