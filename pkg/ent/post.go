// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/Skijetler/alphinium/pkg/ent/post"
	"github.com/Skijetler/alphinium/pkg/ent/thread"
	"github.com/Skijetler/alphinium/pkg/ent/user"
)

// Post is the model entity for the Post schema.
type Post struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// Message holds the value of the "message" field.
	Message string `json:"message,omitempty"`
	// Date holds the value of the "date" field.
	Date time.Time `json:"date,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uint64 `json:"user_id,omitempty"`
	// ThreadID holds the value of the "thread_id" field.
	ThreadID uint64 `json:"thread_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PostQuery when eager-loading is set.
	Edges PostEdges `json:"edges"`
}

// PostEdges holds the relations/edges for other nodes in the graph.
type PostEdges struct {
	// Thread holds the value of the thread edge.
	Thread *Thread `json:"thread,omitempty"`
	// DescribedThread holds the value of the described_thread edge.
	DescribedThread *Thread `json:"described_thread,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Attachments holds the value of the attachments edge.
	Attachments []*Attachment `json:"attachments,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// ThreadOrErr returns the Thread value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PostEdges) ThreadOrErr() (*Thread, error) {
	if e.loadedTypes[0] {
		if e.Thread == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: thread.Label}
		}
		return e.Thread, nil
	}
	return nil, &NotLoadedError{edge: "thread"}
}

// DescribedThreadOrErr returns the DescribedThread value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PostEdges) DescribedThreadOrErr() (*Thread, error) {
	if e.loadedTypes[1] {
		if e.DescribedThread == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: thread.Label}
		}
		return e.DescribedThread, nil
	}
	return nil, &NotLoadedError{edge: "described_thread"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PostEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[2] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// AttachmentsOrErr returns the Attachments value or an error if the edge
// was not loaded in eager-loading.
func (e PostEdges) AttachmentsOrErr() ([]*Attachment, error) {
	if e.loadedTypes[3] {
		return e.Attachments, nil
	}
	return nil, &NotLoadedError{edge: "attachments"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Post) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case post.FieldID, post.FieldUserID, post.FieldThreadID:
			values[i] = new(sql.NullInt64)
		case post.FieldMessage:
			values[i] = new(sql.NullString)
		case post.FieldDate:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Post", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Post fields.
func (po *Post) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case post.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			po.ID = uint64(value.Int64)
		case post.FieldMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message", values[i])
			} else if value.Valid {
				po.Message = value.String
			}
		case post.FieldDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				po.Date = value.Time
			}
		case post.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				po.UserID = uint64(value.Int64)
			}
		case post.FieldThreadID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field thread_id", values[i])
			} else if value.Valid {
				po.ThreadID = uint64(value.Int64)
			}
		}
	}
	return nil
}

// QueryThread queries the "thread" edge of the Post entity.
func (po *Post) QueryThread() *ThreadQuery {
	return (&PostClient{config: po.config}).QueryThread(po)
}

// QueryDescribedThread queries the "described_thread" edge of the Post entity.
func (po *Post) QueryDescribedThread() *ThreadQuery {
	return (&PostClient{config: po.config}).QueryDescribedThread(po)
}

// QueryUser queries the "user" edge of the Post entity.
func (po *Post) QueryUser() *UserQuery {
	return (&PostClient{config: po.config}).QueryUser(po)
}

// QueryAttachments queries the "attachments" edge of the Post entity.
func (po *Post) QueryAttachments() *AttachmentQuery {
	return (&PostClient{config: po.config}).QueryAttachments(po)
}

// Update returns a builder for updating this Post.
// Note that you need to call Post.Unwrap() before calling this method if this Post
// was returned from a transaction, and the transaction was committed or rolled back.
func (po *Post) Update() *PostUpdateOne {
	return (&PostClient{config: po.config}).UpdateOne(po)
}

// Unwrap unwraps the Post entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (po *Post) Unwrap() *Post {
	_tx, ok := po.config.driver.(*txDriver)
	if !ok {
		panic("ent: Post is not a transactional entity")
	}
	po.config.driver = _tx.drv
	return po
}

// String implements the fmt.Stringer.
func (po *Post) String() string {
	var builder strings.Builder
	builder.WriteString("Post(")
	builder.WriteString(fmt.Sprintf("id=%v, ", po.ID))
	builder.WriteString("message=")
	builder.WriteString(po.Message)
	builder.WriteString(", ")
	builder.WriteString("date=")
	builder.WriteString(po.Date.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", po.UserID))
	builder.WriteString(", ")
	builder.WriteString("thread_id=")
	builder.WriteString(fmt.Sprintf("%v", po.ThreadID))
	builder.WriteByte(')')
	return builder.String()
}

// Posts is a parsable slice of Post.
type Posts []*Post

func (po Posts) config(cfg config) {
	for _i := range po {
		po[_i].config = cfg
	}
}
