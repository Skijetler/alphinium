// Code generated by ent, DO NOT EDIT.

package thread

const (
	// Label holds the string label denoting the thread type in the database.
	Label = "thread"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescriptionID holds the string denoting the description_id field in the database.
	FieldDescriptionID = "description_id"
	// FieldSubcategoryID holds the string denoting the subcategory_id field in the database.
	FieldSubcategoryID = "subcategory_id"
	// EdgeSubcategory holds the string denoting the subcategory edge name in mutations.
	EdgeSubcategory = "subcategory"
	// EdgeDescription holds the string denoting the description edge name in mutations.
	EdgeDescription = "description"
	// EdgePosts holds the string denoting the posts edge name in mutations.
	EdgePosts = "posts"
	// Table holds the table name of the thread in the database.
	Table = "threads"
	// SubcategoryTable is the table that holds the subcategory relation/edge.
	SubcategoryTable = "threads"
	// SubcategoryInverseTable is the table name for the Subcategory entity.
	// It exists in this package in order to avoid circular dependency with the "subcategory" package.
	SubcategoryInverseTable = "subcategories"
	// SubcategoryColumn is the table column denoting the subcategory relation/edge.
	SubcategoryColumn = "subcategory_id"
	// DescriptionTable is the table that holds the description relation/edge.
	DescriptionTable = "threads"
	// DescriptionInverseTable is the table name for the Post entity.
	// It exists in this package in order to avoid circular dependency with the "post" package.
	DescriptionInverseTable = "posts"
	// DescriptionColumn is the table column denoting the description relation/edge.
	DescriptionColumn = "description_id"
	// PostsTable is the table that holds the posts relation/edge.
	PostsTable = "posts"
	// PostsInverseTable is the table name for the Post entity.
	// It exists in this package in order to avoid circular dependency with the "post" package.
	PostsInverseTable = "posts"
	// PostsColumn is the table column denoting the posts relation/edge.
	PostsColumn = "thread_id"
)

// Columns holds all SQL columns for thread fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDescriptionID,
	FieldSubcategoryID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}
