// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/Skijetler/alphinium/pkg/ent/user"
	"github.com/Skijetler/alphinium/pkg/ent/usermetadata"
)

// UserMetadata is the model entity for the UserMetadata schema.
type UserMetadata struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// Color holds the value of the "color" field.
	Color string `json:"color,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Gender holds the value of the "gender" field.
	Gender string `json:"gender,omitempty"`
	// LastOnline holds the value of the "last_online" field.
	LastOnline time.Time `json:"last_online,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uint64 `json:"user_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserMetadataQuery when eager-loading is set.
	Edges UserMetadataEdges `json:"edges"`
}

// UserMetadataEdges holds the relations/edges for other nodes in the graph.
type UserMetadataEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserMetadataEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserMetadata) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case usermetadata.FieldID, usermetadata.FieldUserID:
			values[i] = new(sql.NullInt64)
		case usermetadata.FieldColor, usermetadata.FieldTitle, usermetadata.FieldGender:
			values[i] = new(sql.NullString)
		case usermetadata.FieldLastOnline:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UserMetadata", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserMetadata fields.
func (um *UserMetadata) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case usermetadata.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			um.ID = uint64(value.Int64)
		case usermetadata.FieldColor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field color", values[i])
			} else if value.Valid {
				um.Color = value.String
			}
		case usermetadata.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				um.Title = value.String
			}
		case usermetadata.FieldGender:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gender", values[i])
			} else if value.Valid {
				um.Gender = value.String
			}
		case usermetadata.FieldLastOnline:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_online", values[i])
			} else if value.Valid {
				um.LastOnline = value.Time
			}
		case usermetadata.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				um.UserID = uint64(value.Int64)
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the UserMetadata entity.
func (um *UserMetadata) QueryUser() *UserQuery {
	return (&UserMetadataClient{config: um.config}).QueryUser(um)
}

// Update returns a builder for updating this UserMetadata.
// Note that you need to call UserMetadata.Unwrap() before calling this method if this UserMetadata
// was returned from a transaction, and the transaction was committed or rolled back.
func (um *UserMetadata) Update() *UserMetadataUpdateOne {
	return (&UserMetadataClient{config: um.config}).UpdateOne(um)
}

// Unwrap unwraps the UserMetadata entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (um *UserMetadata) Unwrap() *UserMetadata {
	_tx, ok := um.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserMetadata is not a transactional entity")
	}
	um.config.driver = _tx.drv
	return um
}

// String implements the fmt.Stringer.
func (um *UserMetadata) String() string {
	var builder strings.Builder
	builder.WriteString("UserMetadata(")
	builder.WriteString(fmt.Sprintf("id=%v, ", um.ID))
	builder.WriteString("color=")
	builder.WriteString(um.Color)
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(um.Title)
	builder.WriteString(", ")
	builder.WriteString("gender=")
	builder.WriteString(um.Gender)
	builder.WriteString(", ")
	builder.WriteString("last_online=")
	builder.WriteString(um.LastOnline.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", um.UserID))
	builder.WriteByte(')')
	return builder.String()
}

// UserMetadataSlice is a parsable slice of UserMetadata.
type UserMetadataSlice []*UserMetadata

func (um UserMetadataSlice) config(cfg config) {
	for _i := range um {
		um[_i].config = cfg
	}
}
