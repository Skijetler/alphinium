// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/Skijetler/alphinium/auth/internal/app"
	"github.com/Skijetler/alphinium/auth/internal/config"
	"github.com/Skijetler/alphinium/auth/internal/pkg/hash"
	"github.com/Skijetler/alphinium/auth/internal/pkg/paseto"
	"github.com/Skijetler/alphinium/auth/internal/repo"
	"github.com/Skijetler/alphinium/auth/internal/server"
	"github.com/Skijetler/alphinium/auth/internal/service"
	"github.com/Skijetler/alphinium/auth/internal/usecase"
	"github.com/grpc-ecosystem/go-grpc-prometheus"
	"github.com/sirupsen/logrus"
)

// Injectors from wire.go:

// wireApp init application.
func wireApp(configConfig *config.Config, serverMetrics *grpc_prometheus.ServerMetrics, logger *logrus.Logger) (*app.App, func(), error) {
	repoRepo, cleanup, err := repo.NewRepo(configConfig, logger)
	if err != nil {
		return nil, nil, err
	}
	authRepo := repo.NewAuthRepo(repoRepo, logger)
	passwordHasher := hash.NewPasswordHasher(configConfig)
	tokenMaker, err := paseto.NewPasetoMaker(configConfig)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	authUsecase := usecase.NewAuthUsecase(authRepo, logger, passwordHasher, tokenMaker)
	authService := service.NewAuthService(authUsecase)
	grpcServer := server.NewGRPCServer(configConfig, authService, serverMetrics, logger)
	httpServer := server.NewHTTPServer(configConfig, logger)
	appApp := newApp(configConfig, logger, grpcServer, httpServer)
	return appApp, func() {
		cleanup()
	}, nil
}
