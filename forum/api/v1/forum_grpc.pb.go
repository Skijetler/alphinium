// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: v1/forum.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ForumClient is the client API for Forum service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ForumClient interface {
	CreateCategory(ctx context.Context, in *CreateCategoryRequest, opts ...grpc.CallOption) (*CreateCategoryReply, error)
	GetCategory(ctx context.Context, in *GetCategoryRequest, opts ...grpc.CallOption) (*GetCategoryReply, error)
	DeleteCategory(ctx context.Context, in *DeleteCategoryRequest, opts ...grpc.CallOption) (*DeleteCategoryReply, error)
	GetAllCategories(ctx context.Context, in *GetAllCategoriesRequest, opts ...grpc.CallOption) (*GetAllCategoriesReply, error)
	CreateSubcategory(ctx context.Context, in *CreateSubcategoryRequest, opts ...grpc.CallOption) (*CreateSubcategoryReply, error)
	GetSubcategory(ctx context.Context, in *GetSubcategoryRequest, opts ...grpc.CallOption) (*GetSubcategoryReply, error)
	DeleteSubcategory(ctx context.Context, in *DeleteSubcategoryRequest, opts ...grpc.CallOption) (*DeleteSubcategoryReply, error)
	CreateThread(ctx context.Context, in *CreateThreadRequest, opts ...grpc.CallOption) (*CreateThreadReply, error)
	GetThread(ctx context.Context, in *GetThreadRequest, opts ...grpc.CallOption) (*GetThreadReply, error)
	ReplyToThread(ctx context.Context, in *ReplyToThreadRequest, opts ...grpc.CallOption) (*ReplyToThreadReply, error)
	GetThreadPosts(ctx context.Context, in *GetThreadPostsRequest, opts ...grpc.CallOption) (*GetThreadPostsReply, error)
	GetLastPosts(ctx context.Context, in *GetLastPostsRequest, opts ...grpc.CallOption) (*GetLastPostsReply, error)
	DeleteThread(ctx context.Context, in *DeleteThreadRequest, opts ...grpc.CallOption) (*DeleteThreadReply, error)
	DeletePost(ctx context.Context, in *DeletePostRequest, opts ...grpc.CallOption) (*DeletePostReply, error)
}

type forumClient struct {
	cc grpc.ClientConnInterface
}

func NewForumClient(cc grpc.ClientConnInterface) ForumClient {
	return &forumClient{cc}
}

func (c *forumClient) CreateCategory(ctx context.Context, in *CreateCategoryRequest, opts ...grpc.CallOption) (*CreateCategoryReply, error) {
	out := new(CreateCategoryReply)
	err := c.cc.Invoke(ctx, "/api.forum.v1.Forum/CreateCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumClient) GetCategory(ctx context.Context, in *GetCategoryRequest, opts ...grpc.CallOption) (*GetCategoryReply, error) {
	out := new(GetCategoryReply)
	err := c.cc.Invoke(ctx, "/api.forum.v1.Forum/GetCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumClient) DeleteCategory(ctx context.Context, in *DeleteCategoryRequest, opts ...grpc.CallOption) (*DeleteCategoryReply, error) {
	out := new(DeleteCategoryReply)
	err := c.cc.Invoke(ctx, "/api.forum.v1.Forum/DeleteCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumClient) GetAllCategories(ctx context.Context, in *GetAllCategoriesRequest, opts ...grpc.CallOption) (*GetAllCategoriesReply, error) {
	out := new(GetAllCategoriesReply)
	err := c.cc.Invoke(ctx, "/api.forum.v1.Forum/GetAllCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumClient) CreateSubcategory(ctx context.Context, in *CreateSubcategoryRequest, opts ...grpc.CallOption) (*CreateSubcategoryReply, error) {
	out := new(CreateSubcategoryReply)
	err := c.cc.Invoke(ctx, "/api.forum.v1.Forum/CreateSubcategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumClient) GetSubcategory(ctx context.Context, in *GetSubcategoryRequest, opts ...grpc.CallOption) (*GetSubcategoryReply, error) {
	out := new(GetSubcategoryReply)
	err := c.cc.Invoke(ctx, "/api.forum.v1.Forum/GetSubcategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumClient) DeleteSubcategory(ctx context.Context, in *DeleteSubcategoryRequest, opts ...grpc.CallOption) (*DeleteSubcategoryReply, error) {
	out := new(DeleteSubcategoryReply)
	err := c.cc.Invoke(ctx, "/api.forum.v1.Forum/DeleteSubcategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumClient) CreateThread(ctx context.Context, in *CreateThreadRequest, opts ...grpc.CallOption) (*CreateThreadReply, error) {
	out := new(CreateThreadReply)
	err := c.cc.Invoke(ctx, "/api.forum.v1.Forum/CreateThread", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumClient) GetThread(ctx context.Context, in *GetThreadRequest, opts ...grpc.CallOption) (*GetThreadReply, error) {
	out := new(GetThreadReply)
	err := c.cc.Invoke(ctx, "/api.forum.v1.Forum/GetThread", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumClient) ReplyToThread(ctx context.Context, in *ReplyToThreadRequest, opts ...grpc.CallOption) (*ReplyToThreadReply, error) {
	out := new(ReplyToThreadReply)
	err := c.cc.Invoke(ctx, "/api.forum.v1.Forum/ReplyToThread", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumClient) GetThreadPosts(ctx context.Context, in *GetThreadPostsRequest, opts ...grpc.CallOption) (*GetThreadPostsReply, error) {
	out := new(GetThreadPostsReply)
	err := c.cc.Invoke(ctx, "/api.forum.v1.Forum/GetThreadPosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumClient) GetLastPosts(ctx context.Context, in *GetLastPostsRequest, opts ...grpc.CallOption) (*GetLastPostsReply, error) {
	out := new(GetLastPostsReply)
	err := c.cc.Invoke(ctx, "/api.forum.v1.Forum/GetLastPosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumClient) DeleteThread(ctx context.Context, in *DeleteThreadRequest, opts ...grpc.CallOption) (*DeleteThreadReply, error) {
	out := new(DeleteThreadReply)
	err := c.cc.Invoke(ctx, "/api.forum.v1.Forum/DeleteThread", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumClient) DeletePost(ctx context.Context, in *DeletePostRequest, opts ...grpc.CallOption) (*DeletePostReply, error) {
	out := new(DeletePostReply)
	err := c.cc.Invoke(ctx, "/api.forum.v1.Forum/DeletePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ForumServer is the server API for Forum service.
// All implementations must embed UnimplementedForumServer
// for forward compatibility
type ForumServer interface {
	CreateCategory(context.Context, *CreateCategoryRequest) (*CreateCategoryReply, error)
	GetCategory(context.Context, *GetCategoryRequest) (*GetCategoryReply, error)
	DeleteCategory(context.Context, *DeleteCategoryRequest) (*DeleteCategoryReply, error)
	GetAllCategories(context.Context, *GetAllCategoriesRequest) (*GetAllCategoriesReply, error)
	CreateSubcategory(context.Context, *CreateSubcategoryRequest) (*CreateSubcategoryReply, error)
	GetSubcategory(context.Context, *GetSubcategoryRequest) (*GetSubcategoryReply, error)
	DeleteSubcategory(context.Context, *DeleteSubcategoryRequest) (*DeleteSubcategoryReply, error)
	CreateThread(context.Context, *CreateThreadRequest) (*CreateThreadReply, error)
	GetThread(context.Context, *GetThreadRequest) (*GetThreadReply, error)
	ReplyToThread(context.Context, *ReplyToThreadRequest) (*ReplyToThreadReply, error)
	GetThreadPosts(context.Context, *GetThreadPostsRequest) (*GetThreadPostsReply, error)
	GetLastPosts(context.Context, *GetLastPostsRequest) (*GetLastPostsReply, error)
	DeleteThread(context.Context, *DeleteThreadRequest) (*DeleteThreadReply, error)
	DeletePost(context.Context, *DeletePostRequest) (*DeletePostReply, error)
	mustEmbedUnimplementedForumServer()
}

// UnimplementedForumServer must be embedded to have forward compatible implementations.
type UnimplementedForumServer struct {
}

func (UnimplementedForumServer) CreateCategory(context.Context, *CreateCategoryRequest) (*CreateCategoryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCategory not implemented")
}
func (UnimplementedForumServer) GetCategory(context.Context, *GetCategoryRequest) (*GetCategoryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategory not implemented")
}
func (UnimplementedForumServer) DeleteCategory(context.Context, *DeleteCategoryRequest) (*DeleteCategoryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCategory not implemented")
}
func (UnimplementedForumServer) GetAllCategories(context.Context, *GetAllCategoriesRequest) (*GetAllCategoriesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCategories not implemented")
}
func (UnimplementedForumServer) CreateSubcategory(context.Context, *CreateSubcategoryRequest) (*CreateSubcategoryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubcategory not implemented")
}
func (UnimplementedForumServer) GetSubcategory(context.Context, *GetSubcategoryRequest) (*GetSubcategoryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubcategory not implemented")
}
func (UnimplementedForumServer) DeleteSubcategory(context.Context, *DeleteSubcategoryRequest) (*DeleteSubcategoryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSubcategory not implemented")
}
func (UnimplementedForumServer) CreateThread(context.Context, *CreateThreadRequest) (*CreateThreadReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateThread not implemented")
}
func (UnimplementedForumServer) GetThread(context.Context, *GetThreadRequest) (*GetThreadReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetThread not implemented")
}
func (UnimplementedForumServer) ReplyToThread(context.Context, *ReplyToThreadRequest) (*ReplyToThreadReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplyToThread not implemented")
}
func (UnimplementedForumServer) GetThreadPosts(context.Context, *GetThreadPostsRequest) (*GetThreadPostsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetThreadPosts not implemented")
}
func (UnimplementedForumServer) GetLastPosts(context.Context, *GetLastPostsRequest) (*GetLastPostsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastPosts not implemented")
}
func (UnimplementedForumServer) DeleteThread(context.Context, *DeleteThreadRequest) (*DeleteThreadReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteThread not implemented")
}
func (UnimplementedForumServer) DeletePost(context.Context, *DeletePostRequest) (*DeletePostReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePost not implemented")
}
func (UnimplementedForumServer) mustEmbedUnimplementedForumServer() {}

// UnsafeForumServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ForumServer will
// result in compilation errors.
type UnsafeForumServer interface {
	mustEmbedUnimplementedForumServer()
}

func RegisterForumServer(s grpc.ServiceRegistrar, srv ForumServer) {
	s.RegisterService(&Forum_ServiceDesc, srv)
}

func _Forum_CreateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumServer).CreateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.forum.v1.Forum/CreateCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumServer).CreateCategory(ctx, req.(*CreateCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forum_GetCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumServer).GetCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.forum.v1.Forum/GetCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumServer).GetCategory(ctx, req.(*GetCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forum_DeleteCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumServer).DeleteCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.forum.v1.Forum/DeleteCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumServer).DeleteCategory(ctx, req.(*DeleteCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forum_GetAllCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumServer).GetAllCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.forum.v1.Forum/GetAllCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumServer).GetAllCategories(ctx, req.(*GetAllCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forum_CreateSubcategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSubcategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumServer).CreateSubcategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.forum.v1.Forum/CreateSubcategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumServer).CreateSubcategory(ctx, req.(*CreateSubcategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forum_GetSubcategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubcategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumServer).GetSubcategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.forum.v1.Forum/GetSubcategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumServer).GetSubcategory(ctx, req.(*GetSubcategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forum_DeleteSubcategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSubcategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumServer).DeleteSubcategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.forum.v1.Forum/DeleteSubcategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumServer).DeleteSubcategory(ctx, req.(*DeleteSubcategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forum_CreateThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumServer).CreateThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.forum.v1.Forum/CreateThread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumServer).CreateThread(ctx, req.(*CreateThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forum_GetThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumServer).GetThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.forum.v1.Forum/GetThread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumServer).GetThread(ctx, req.(*GetThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forum_ReplyToThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplyToThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumServer).ReplyToThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.forum.v1.Forum/ReplyToThread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumServer).ReplyToThread(ctx, req.(*ReplyToThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forum_GetThreadPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetThreadPostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumServer).GetThreadPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.forum.v1.Forum/GetThreadPosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumServer).GetThreadPosts(ctx, req.(*GetThreadPostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forum_GetLastPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLastPostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumServer).GetLastPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.forum.v1.Forum/GetLastPosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumServer).GetLastPosts(ctx, req.(*GetLastPostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forum_DeleteThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumServer).DeleteThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.forum.v1.Forum/DeleteThread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumServer).DeleteThread(ctx, req.(*DeleteThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forum_DeletePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumServer).DeletePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.forum.v1.Forum/DeletePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumServer).DeletePost(ctx, req.(*DeletePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Forum_ServiceDesc is the grpc.ServiceDesc for Forum service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Forum_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.forum.v1.Forum",
	HandlerType: (*ForumServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCategory",
			Handler:    _Forum_CreateCategory_Handler,
		},
		{
			MethodName: "GetCategory",
			Handler:    _Forum_GetCategory_Handler,
		},
		{
			MethodName: "DeleteCategory",
			Handler:    _Forum_DeleteCategory_Handler,
		},
		{
			MethodName: "GetAllCategories",
			Handler:    _Forum_GetAllCategories_Handler,
		},
		{
			MethodName: "CreateSubcategory",
			Handler:    _Forum_CreateSubcategory_Handler,
		},
		{
			MethodName: "GetSubcategory",
			Handler:    _Forum_GetSubcategory_Handler,
		},
		{
			MethodName: "DeleteSubcategory",
			Handler:    _Forum_DeleteSubcategory_Handler,
		},
		{
			MethodName: "CreateThread",
			Handler:    _Forum_CreateThread_Handler,
		},
		{
			MethodName: "GetThread",
			Handler:    _Forum_GetThread_Handler,
		},
		{
			MethodName: "ReplyToThread",
			Handler:    _Forum_ReplyToThread_Handler,
		},
		{
			MethodName: "GetThreadPosts",
			Handler:    _Forum_GetThreadPosts_Handler,
		},
		{
			MethodName: "GetLastPosts",
			Handler:    _Forum_GetLastPosts_Handler,
		},
		{
			MethodName: "DeleteThread",
			Handler:    _Forum_DeleteThread_Handler,
		},
		{
			MethodName: "DeletePost",
			Handler:    _Forum_DeletePost_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/forum.proto",
}
