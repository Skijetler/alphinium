// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.7
// source: v1/forum.proto

package v1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CategoryBasicInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *CategoryBasicInfo) Reset() {
	*x = CategoryBasicInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_forum_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryBasicInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryBasicInfo) ProtoMessage() {}

func (x *CategoryBasicInfo) ProtoReflect() protoreflect.Message {
	mi := &file_v1_forum_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryBasicInfo.ProtoReflect.Descriptor instead.
func (*CategoryBasicInfo) Descriptor() ([]byte, []int) {
	return file_v1_forum_proto_rawDescGZIP(), []int{0}
}

func (x *CategoryBasicInfo) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CategoryBasicInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type SubcategoryBasicInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *SubcategoryBasicInfo) Reset() {
	*x = SubcategoryBasicInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_forum_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubcategoryBasicInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubcategoryBasicInfo) ProtoMessage() {}

func (x *SubcategoryBasicInfo) ProtoReflect() protoreflect.Message {
	mi := &file_v1_forum_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubcategoryBasicInfo.ProtoReflect.Descriptor instead.
func (*SubcategoryBasicInfo) Descriptor() ([]byte, []int) {
	return file_v1_forum_proto_rawDescGZIP(), []int{1}
}

func (x *SubcategoryBasicInfo) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SubcategoryBasicInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ThreadBasicInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ThreadBasicInfo) Reset() {
	*x = ThreadBasicInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_forum_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThreadBasicInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreadBasicInfo) ProtoMessage() {}

func (x *ThreadBasicInfo) ProtoReflect() protoreflect.Message {
	mi := &file_v1_forum_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreadBasicInfo.ProtoReflect.Descriptor instead.
func (*ThreadBasicInfo) Descriptor() ([]byte, []int) {
	return file_v1_forum_proto_rawDescGZIP(), []int{2}
}

func (x *ThreadBasicInfo) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ThreadBasicInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ThreadBriefInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CreatorId     uint64                 `protobuf:"varint,3,opt,name=creator_id,json=creatorId,proto3" json:"creator_id,omitempty"`
	CreatorName   string                 `protobuf:"bytes,4,opt,name=creator_name,json=creatorName,proto3" json:"creator_name,omitempty"`
	CreatorAvatar string                 `protobuf:"bytes,5,opt,name=creator_avatar,json=creatorAvatar,proto3" json:"creator_avatar,omitempty"`
	CreationDate  *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=creation_date,json=creationDate,proto3" json:"creation_date,omitempty"`
}

func (x *ThreadBriefInfo) Reset() {
	*x = ThreadBriefInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_forum_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThreadBriefInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreadBriefInfo) ProtoMessage() {}

func (x *ThreadBriefInfo) ProtoReflect() protoreflect.Message {
	mi := &file_v1_forum_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreadBriefInfo.ProtoReflect.Descriptor instead.
func (*ThreadBriefInfo) Descriptor() ([]byte, []int) {
	return file_v1_forum_proto_rawDescGZIP(), []int{3}
}

func (x *ThreadBriefInfo) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ThreadBriefInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ThreadBriefInfo) GetCreatorId() uint64 {
	if x != nil {
		return x.CreatorId
	}
	return 0
}

func (x *ThreadBriefInfo) GetCreatorName() string {
	if x != nil {
		return x.CreatorName
	}
	return ""
}

func (x *ThreadBriefInfo) GetCreatorAvatar() string {
	if x != nil {
		return x.CreatorAvatar
	}
	return ""
}

func (x *ThreadBriefInfo) GetCreationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationDate
	}
	return nil
}

type ThreadInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint64        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Pages       uint64        `protobuf:"varint,3,opt,name=pages,proto3" json:"pages,omitempty"`
	Description *ThreadPost   `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Posts       []*ThreadPost `protobuf:"bytes,5,rep,name=posts,proto3" json:"posts,omitempty"`
}

func (x *ThreadInfo) Reset() {
	*x = ThreadInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_forum_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThreadInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreadInfo) ProtoMessage() {}

func (x *ThreadInfo) ProtoReflect() protoreflect.Message {
	mi := &file_v1_forum_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreadInfo.ProtoReflect.Descriptor instead.
func (*ThreadInfo) Descriptor() ([]byte, []int) {
	return file_v1_forum_proto_rawDescGZIP(), []int{4}
}

func (x *ThreadInfo) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ThreadInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ThreadInfo) GetPages() uint64 {
	if x != nil {
		return x.Pages
	}
	return 0
}

func (x *ThreadInfo) GetDescription() *ThreadPost {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *ThreadInfo) GetPosts() []*ThreadPost {
	if x != nil {
		return x.Posts
	}
	return nil
}

type UserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	NameColor string                 `protobuf:"bytes,3,opt,name=name_color,json=nameColor,proto3" json:"name_color,omitempty"`
	Title     string                 `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Avatar    string                 `protobuf:"bytes,5,opt,name=avatar,proto3" json:"avatar,omitempty"`
	JoinDate  *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=join_date,json=joinDate,proto3" json:"join_date,omitempty"`
}

func (x *UserInfo) Reset() {
	*x = UserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_forum_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo) ProtoMessage() {}

func (x *UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_v1_forum_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo.ProtoReflect.Descriptor instead.
func (*UserInfo) Descriptor() ([]byte, []int) {
	return file_v1_forum_proto_rawDescGZIP(), []int{5}
}

func (x *UserInfo) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserInfo) GetNameColor() string {
	if x != nil {
		return x.NameColor
	}
	return ""
}

func (x *UserInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UserInfo) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *UserInfo) GetJoinDate() *timestamppb.Timestamp {
	if x != nil {
		return x.JoinDate
	}
	return nil
}

type ThreadPost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	User        *UserInfo              `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Message     string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Date        *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=date,proto3" json:"date,omitempty"`
	Attachments []*Attachment          `protobuf:"bytes,5,rep,name=attachments,proto3" json:"attachments,omitempty"`
}

func (x *ThreadPost) Reset() {
	*x = ThreadPost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_forum_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThreadPost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreadPost) ProtoMessage() {}

func (x *ThreadPost) ProtoReflect() protoreflect.Message {
	mi := &file_v1_forum_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreadPost.ProtoReflect.Descriptor instead.
func (*ThreadPost) Descriptor() ([]byte, []int) {
	return file_v1_forum_proto_rawDescGZIP(), []int{6}
}

func (x *ThreadPost) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ThreadPost) GetUser() *UserInfo {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *ThreadPost) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ThreadPost) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *ThreadPost) GetAttachments() []*Attachment {
	if x != nil {
		return x.Attachments
	}
	return nil
}

type ThreadPostCreation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message        string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	AttachmentsIds []uint64 `protobuf:"varint,2,rep,packed,name=attachments_ids,json=attachmentsIds,proto3" json:"attachments_ids,omitempty"`
}

func (x *ThreadPostCreation) Reset() {
	*x = ThreadPostCreation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_forum_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThreadPostCreation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreadPostCreation) ProtoMessage() {}

func (x *ThreadPostCreation) ProtoReflect() protoreflect.Message {
	mi := &file_v1_forum_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreadPostCreation.ProtoReflect.Descriptor instead.
func (*ThreadPostCreation) Descriptor() ([]byte, []int) {
	return file_v1_forum_proto_rawDescGZIP(), []int{7}
}

func (x *ThreadPostCreation) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ThreadPostCreation) GetAttachmentsIds() []uint64 {
	if x != nil {
		return x.AttachmentsIds
	}
	return nil
}

type Attachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Size string `protobuf:"bytes,3,opt,name=size,proto3" json:"size,omitempty"`
	Type string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Link string `protobuf:"bytes,5,opt,name=link,proto3" json:"link,omitempty"`
}

func (x *Attachment) Reset() {
	*x = Attachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_forum_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Attachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attachment) ProtoMessage() {}

func (x *Attachment) ProtoReflect() protoreflect.Message {
	mi := &file_v1_forum_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attachment.ProtoReflect.Descriptor instead.
func (*Attachment) Descriptor() ([]byte, []int) {
	return file_v1_forum_proto_rawDescGZIP(), []int{8}
}

func (x *Attachment) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Attachment) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Attachment) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *Attachment) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Attachment) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

type CreateCategoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryName string `protobuf:"bytes,1,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`
}

func (x *CreateCategoryRequest) Reset() {
	*x = CreateCategoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_forum_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCategoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCategoryRequest) ProtoMessage() {}

func (x *CreateCategoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_forum_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCategoryRequest.ProtoReflect.Descriptor instead.
func (*CreateCategoryRequest) Descriptor() ([]byte, []int) {
	return file_v1_forum_proto_rawDescGZIP(), []int{9}
}

func (x *CreateCategoryRequest) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

type CreateCategoryReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryId uint64 `protobuf:"varint,1,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
}

func (x *CreateCategoryReply) Reset() {
	*x = CreateCategoryReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_forum_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCategoryReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCategoryReply) ProtoMessage() {}

func (x *CreateCategoryReply) ProtoReflect() protoreflect.Message {
	mi := &file_v1_forum_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCategoryReply.ProtoReflect.Descriptor instead.
func (*CreateCategoryReply) Descriptor() ([]byte, []int) {
	return file_v1_forum_proto_rawDescGZIP(), []int{10}
}

func (x *CreateCategoryReply) GetCategoryId() uint64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

type GetCategoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryId uint64 `protobuf:"varint,1,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
}

func (x *GetCategoryRequest) Reset() {
	*x = GetCategoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_forum_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCategoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCategoryRequest) ProtoMessage() {}

func (x *GetCategoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_forum_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCategoryRequest.ProtoReflect.Descriptor instead.
func (*GetCategoryRequest) Descriptor() ([]byte, []int) {
	return file_v1_forum_proto_rawDescGZIP(), []int{11}
}

func (x *GetCategoryRequest) GetCategoryId() uint64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

type GetCategoryReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicInfo     *CategoryBasicInfo      `protobuf:"bytes,1,opt,name=basic_info,json=basicInfo,proto3" json:"basic_info,omitempty"`
	Subcategories []*SubcategoryBasicInfo `protobuf:"bytes,2,rep,name=subcategories,proto3" json:"subcategories,omitempty"`
}

func (x *GetCategoryReply) Reset() {
	*x = GetCategoryReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_forum_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCategoryReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCategoryReply) ProtoMessage() {}

func (x *GetCategoryReply) ProtoReflect() protoreflect.Message {
	mi := &file_v1_forum_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCategoryReply.ProtoReflect.Descriptor instead.
func (*GetCategoryReply) Descriptor() ([]byte, []int) {
	return file_v1_forum_proto_rawDescGZIP(), []int{12}
}

func (x *GetCategoryReply) GetBasicInfo() *CategoryBasicInfo {
	if x != nil {
		return x.BasicInfo
	}
	return nil
}

func (x *GetCategoryReply) GetSubcategories() []*SubcategoryBasicInfo {
	if x != nil {
		return x.Subcategories
	}
	return nil
}

type DeleteCategoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryId uint64 `protobuf:"varint,1,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
}

func (x *DeleteCategoryRequest) Reset() {
	*x = DeleteCategoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_forum_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCategoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCategoryRequest) ProtoMessage() {}

func (x *DeleteCategoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_forum_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCategoryRequest.ProtoReflect.Descriptor instead.
func (*DeleteCategoryRequest) Descriptor() ([]byte, []int) {
	return file_v1_forum_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteCategoryRequest) GetCategoryId() uint64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

type DeleteCategoryReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Succeed bool `protobuf:"varint,1,opt,name=succeed,proto3" json:"succeed,omitempty"`
}

func (x *DeleteCategoryReply) Reset() {
	*x = DeleteCategoryReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_forum_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCategoryReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCategoryReply) ProtoMessage() {}

func (x *DeleteCategoryReply) ProtoReflect() protoreflect.Message {
	mi := &file_v1_forum_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCategoryReply.ProtoReflect.Descriptor instead.
func (*DeleteCategoryReply) Descriptor() ([]byte, []int) {
	return file_v1_forum_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteCategoryReply) GetSucceed() bool {
	if x != nil {
		return x.Succeed
	}
	return false
}

type GetAllCategoriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetAllCategoriesRequest) Reset() {
	*x = GetAllCategoriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_forum_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllCategoriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllCategoriesRequest) ProtoMessage() {}

func (x *GetAllCategoriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_forum_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllCategoriesRequest.ProtoReflect.Descriptor instead.
func (*GetAllCategoriesRequest) Descriptor() ([]byte, []int) {
	return file_v1_forum_proto_rawDescGZIP(), []int{15}
}

type GetAllCategoriesReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Categories []*CategoryBasicInfo `protobuf:"bytes,1,rep,name=categories,proto3" json:"categories,omitempty"`
}

func (x *GetAllCategoriesReply) Reset() {
	*x = GetAllCategoriesReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_forum_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllCategoriesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllCategoriesReply) ProtoMessage() {}

func (x *GetAllCategoriesReply) ProtoReflect() protoreflect.Message {
	mi := &file_v1_forum_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllCategoriesReply.ProtoReflect.Descriptor instead.
func (*GetAllCategoriesReply) Descriptor() ([]byte, []int) {
	return file_v1_forum_proto_rawDescGZIP(), []int{16}
}

func (x *GetAllCategoriesReply) GetCategories() []*CategoryBasicInfo {
	if x != nil {
		return x.Categories
	}
	return nil
}

type CreateSubcategoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryId  uint64 `protobuf:"varint,1,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *CreateSubcategoryRequest) Reset() {
	*x = CreateSubcategoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_forum_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSubcategoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSubcategoryRequest) ProtoMessage() {}

func (x *CreateSubcategoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_forum_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSubcategoryRequest.ProtoReflect.Descriptor instead.
func (*CreateSubcategoryRequest) Descriptor() ([]byte, []int) {
	return file_v1_forum_proto_rawDescGZIP(), []int{17}
}

func (x *CreateSubcategoryRequest) GetCategoryId() uint64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *CreateSubcategoryRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateSubcategoryRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type CreateSubcategoryReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubcategoryId uint64 `protobuf:"varint,1,opt,name=subcategory_id,json=subcategoryId,proto3" json:"subcategory_id,omitempty"`
}

func (x *CreateSubcategoryReply) Reset() {
	*x = CreateSubcategoryReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_forum_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSubcategoryReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSubcategoryReply) ProtoMessage() {}

func (x *CreateSubcategoryReply) ProtoReflect() protoreflect.Message {
	mi := &file_v1_forum_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSubcategoryReply.ProtoReflect.Descriptor instead.
func (*CreateSubcategoryReply) Descriptor() ([]byte, []int) {
	return file_v1_forum_proto_rawDescGZIP(), []int{18}
}

func (x *CreateSubcategoryReply) GetSubcategoryId() uint64 {
	if x != nil {
		return x.SubcategoryId
	}
	return 0
}

type GetSubcategoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubcategoryId uint64 `protobuf:"varint,1,opt,name=subcategory_id,json=subcategoryId,proto3" json:"subcategory_id,omitempty"`
}

func (x *GetSubcategoryRequest) Reset() {
	*x = GetSubcategoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_forum_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubcategoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubcategoryRequest) ProtoMessage() {}

func (x *GetSubcategoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_forum_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubcategoryRequest.ProtoReflect.Descriptor instead.
func (*GetSubcategoryRequest) Descriptor() ([]byte, []int) {
	return file_v1_forum_proto_rawDescGZIP(), []int{19}
}

func (x *GetSubcategoryRequest) GetSubcategoryId() uint64 {
	if x != nil {
		return x.SubcategoryId
	}
	return 0
}

type GetSubcategoryReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicInfo   *SubcategoryBasicInfo `protobuf:"bytes,1,opt,name=basic_info,json=basicInfo,proto3" json:"basic_info,omitempty"`
	Description string                `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Pages       uint64                `protobuf:"varint,3,opt,name=pages,proto3" json:"pages,omitempty"`
	Threads     []*ThreadBriefInfo    `protobuf:"bytes,4,rep,name=threads,proto3" json:"threads,omitempty"`
}

func (x *GetSubcategoryReply) Reset() {
	*x = GetSubcategoryReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_forum_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubcategoryReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubcategoryReply) ProtoMessage() {}

func (x *GetSubcategoryReply) ProtoReflect() protoreflect.Message {
	mi := &file_v1_forum_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubcategoryReply.ProtoReflect.Descriptor instead.
func (*GetSubcategoryReply) Descriptor() ([]byte, []int) {
	return file_v1_forum_proto_rawDescGZIP(), []int{20}
}

func (x *GetSubcategoryReply) GetBasicInfo() *SubcategoryBasicInfo {
	if x != nil {
		return x.BasicInfo
	}
	return nil
}

func (x *GetSubcategoryReply) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GetSubcategoryReply) GetPages() uint64 {
	if x != nil {
		return x.Pages
	}
	return 0
}

func (x *GetSubcategoryReply) GetThreads() []*ThreadBriefInfo {
	if x != nil {
		return x.Threads
	}
	return nil
}

type DeleteSubcategoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubcategoryId uint64 `protobuf:"varint,1,opt,name=subcategory_id,json=subcategoryId,proto3" json:"subcategory_id,omitempty"`
}

func (x *DeleteSubcategoryRequest) Reset() {
	*x = DeleteSubcategoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_forum_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSubcategoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSubcategoryRequest) ProtoMessage() {}

func (x *DeleteSubcategoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_forum_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSubcategoryRequest.ProtoReflect.Descriptor instead.
func (*DeleteSubcategoryRequest) Descriptor() ([]byte, []int) {
	return file_v1_forum_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteSubcategoryRequest) GetSubcategoryId() uint64 {
	if x != nil {
		return x.SubcategoryId
	}
	return 0
}

type DeleteSubcategoryReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Succeed bool `protobuf:"varint,1,opt,name=succeed,proto3" json:"succeed,omitempty"`
}

func (x *DeleteSubcategoryReply) Reset() {
	*x = DeleteSubcategoryReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_forum_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSubcategoryReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSubcategoryReply) ProtoMessage() {}

func (x *DeleteSubcategoryReply) ProtoReflect() protoreflect.Message {
	mi := &file_v1_forum_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSubcategoryReply.ProtoReflect.Descriptor instead.
func (*DeleteSubcategoryReply) Descriptor() ([]byte, []int) {
	return file_v1_forum_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteSubcategoryReply) GetSucceed() bool {
	if x != nil {
		return x.Succeed
	}
	return false
}

type CreateThreadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryId  uint64              `protobuf:"varint,1,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
	Name        string              `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description *ThreadPostCreation `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *CreateThreadRequest) Reset() {
	*x = CreateThreadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_forum_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateThreadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateThreadRequest) ProtoMessage() {}

func (x *CreateThreadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_forum_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateThreadRequest.ProtoReflect.Descriptor instead.
func (*CreateThreadRequest) Descriptor() ([]byte, []int) {
	return file_v1_forum_proto_rawDescGZIP(), []int{23}
}

func (x *CreateThreadRequest) GetCategoryId() uint64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *CreateThreadRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateThreadRequest) GetDescription() *ThreadPostCreation {
	if x != nil {
		return x.Description
	}
	return nil
}

type CreateThreadReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThreadId uint64 `protobuf:"varint,1,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
}

func (x *CreateThreadReply) Reset() {
	*x = CreateThreadReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_forum_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateThreadReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateThreadReply) ProtoMessage() {}

func (x *CreateThreadReply) ProtoReflect() protoreflect.Message {
	mi := &file_v1_forum_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateThreadReply.ProtoReflect.Descriptor instead.
func (*CreateThreadReply) Descriptor() ([]byte, []int) {
	return file_v1_forum_proto_rawDescGZIP(), []int{24}
}

func (x *CreateThreadReply) GetThreadId() uint64 {
	if x != nil {
		return x.ThreadId
	}
	return 0
}

type GetThreadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThreadId uint64 `protobuf:"varint,1,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
}

func (x *GetThreadRequest) Reset() {
	*x = GetThreadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_forum_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetThreadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetThreadRequest) ProtoMessage() {}

func (x *GetThreadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_forum_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetThreadRequest.ProtoReflect.Descriptor instead.
func (*GetThreadRequest) Descriptor() ([]byte, []int) {
	return file_v1_forum_proto_rawDescGZIP(), []int{25}
}

func (x *GetThreadRequest) GetThreadId() uint64 {
	if x != nil {
		return x.ThreadId
	}
	return 0
}

type GetThreadReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicInfo   *ThreadBasicInfo `protobuf:"bytes,1,opt,name=basic_info,json=basicInfo,proto3" json:"basic_info,omitempty"`
	Description *ThreadPost      `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Posts       []*ThreadPost    `protobuf:"bytes,3,rep,name=posts,proto3" json:"posts,omitempty"`
}

func (x *GetThreadReply) Reset() {
	*x = GetThreadReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_forum_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetThreadReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetThreadReply) ProtoMessage() {}

func (x *GetThreadReply) ProtoReflect() protoreflect.Message {
	mi := &file_v1_forum_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetThreadReply.ProtoReflect.Descriptor instead.
func (*GetThreadReply) Descriptor() ([]byte, []int) {
	return file_v1_forum_proto_rawDescGZIP(), []int{26}
}

func (x *GetThreadReply) GetBasicInfo() *ThreadBasicInfo {
	if x != nil {
		return x.BasicInfo
	}
	return nil
}

func (x *GetThreadReply) GetDescription() *ThreadPost {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *GetThreadReply) GetPosts() []*ThreadPost {
	if x != nil {
		return x.Posts
	}
	return nil
}

type DeleteThreadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThreadId uint64 `protobuf:"varint,1,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
}

func (x *DeleteThreadRequest) Reset() {
	*x = DeleteThreadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_forum_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteThreadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteThreadRequest) ProtoMessage() {}

func (x *DeleteThreadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_forum_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteThreadRequest.ProtoReflect.Descriptor instead.
func (*DeleteThreadRequest) Descriptor() ([]byte, []int) {
	return file_v1_forum_proto_rawDescGZIP(), []int{27}
}

func (x *DeleteThreadRequest) GetThreadId() uint64 {
	if x != nil {
		return x.ThreadId
	}
	return 0
}

type DeleteThreadReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Succeed bool `protobuf:"varint,1,opt,name=succeed,proto3" json:"succeed,omitempty"`
}

func (x *DeleteThreadReply) Reset() {
	*x = DeleteThreadReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_forum_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteThreadReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteThreadReply) ProtoMessage() {}

func (x *DeleteThreadReply) ProtoReflect() protoreflect.Message {
	mi := &file_v1_forum_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteThreadReply.ProtoReflect.Descriptor instead.
func (*DeleteThreadReply) Descriptor() ([]byte, []int) {
	return file_v1_forum_proto_rawDescGZIP(), []int{28}
}

func (x *DeleteThreadReply) GetSucceed() bool {
	if x != nil {
		return x.Succeed
	}
	return false
}

type ReplyToThreadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThreadId uint64              `protobuf:"varint,1,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	Post     *ThreadPostCreation `protobuf:"bytes,2,opt,name=post,proto3" json:"post,omitempty"`
}

func (x *ReplyToThreadRequest) Reset() {
	*x = ReplyToThreadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_forum_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyToThreadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyToThreadRequest) ProtoMessage() {}

func (x *ReplyToThreadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_forum_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyToThreadRequest.ProtoReflect.Descriptor instead.
func (*ReplyToThreadRequest) Descriptor() ([]byte, []int) {
	return file_v1_forum_proto_rawDescGZIP(), []int{29}
}

func (x *ReplyToThreadRequest) GetThreadId() uint64 {
	if x != nil {
		return x.ThreadId
	}
	return 0
}

func (x *ReplyToThreadRequest) GetPost() *ThreadPostCreation {
	if x != nil {
		return x.Post
	}
	return nil
}

type ReplyToThreadReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Succeed bool `protobuf:"varint,1,opt,name=succeed,proto3" json:"succeed,omitempty"`
}

func (x *ReplyToThreadReply) Reset() {
	*x = ReplyToThreadReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_forum_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyToThreadReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyToThreadReply) ProtoMessage() {}

func (x *ReplyToThreadReply) ProtoReflect() protoreflect.Message {
	mi := &file_v1_forum_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyToThreadReply.ProtoReflect.Descriptor instead.
func (*ReplyToThreadReply) Descriptor() ([]byte, []int) {
	return file_v1_forum_proto_rawDescGZIP(), []int{30}
}

func (x *ReplyToThreadReply) GetSucceed() bool {
	if x != nil {
		return x.Succeed
	}
	return false
}

type GetThreadPostsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThreadId uint64 `protobuf:"varint,1,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	Page     uint64 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *GetThreadPostsRequest) Reset() {
	*x = GetThreadPostsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_forum_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetThreadPostsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetThreadPostsRequest) ProtoMessage() {}

func (x *GetThreadPostsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_forum_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetThreadPostsRequest.ProtoReflect.Descriptor instead.
func (*GetThreadPostsRequest) Descriptor() ([]byte, []int) {
	return file_v1_forum_proto_rawDescGZIP(), []int{31}
}

func (x *GetThreadPostsRequest) GetThreadId() uint64 {
	if x != nil {
		return x.ThreadId
	}
	return 0
}

func (x *GetThreadPostsRequest) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

type GetThreadPostsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Posts []*ThreadPost `protobuf:"bytes,1,rep,name=posts,proto3" json:"posts,omitempty"`
}

func (x *GetThreadPostsReply) Reset() {
	*x = GetThreadPostsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_forum_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetThreadPostsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetThreadPostsReply) ProtoMessage() {}

func (x *GetThreadPostsReply) ProtoReflect() protoreflect.Message {
	mi := &file_v1_forum_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetThreadPostsReply.ProtoReflect.Descriptor instead.
func (*GetThreadPostsReply) Descriptor() ([]byte, []int) {
	return file_v1_forum_proto_rawDescGZIP(), []int{32}
}

func (x *GetThreadPostsReply) GetPosts() []*ThreadPost {
	if x != nil {
		return x.Posts
	}
	return nil
}

type GetLastPostsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Num uint64 `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
}

func (x *GetLastPostsRequest) Reset() {
	*x = GetLastPostsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_forum_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLastPostsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLastPostsRequest) ProtoMessage() {}

func (x *GetLastPostsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_forum_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLastPostsRequest.ProtoReflect.Descriptor instead.
func (*GetLastPostsRequest) Descriptor() ([]byte, []int) {
	return file_v1_forum_proto_rawDescGZIP(), []int{33}
}

func (x *GetLastPostsRequest) GetNum() uint64 {
	if x != nil {
		return x.Num
	}
	return 0
}

type GetLastPostsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Posts []*ThreadPost `protobuf:"bytes,1,rep,name=posts,proto3" json:"posts,omitempty"`
}

func (x *GetLastPostsReply) Reset() {
	*x = GetLastPostsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_forum_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLastPostsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLastPostsReply) ProtoMessage() {}

func (x *GetLastPostsReply) ProtoReflect() protoreflect.Message {
	mi := &file_v1_forum_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLastPostsReply.ProtoReflect.Descriptor instead.
func (*GetLastPostsReply) Descriptor() ([]byte, []int) {
	return file_v1_forum_proto_rawDescGZIP(), []int{34}
}

func (x *GetLastPostsReply) GetPosts() []*ThreadPost {
	if x != nil {
		return x.Posts
	}
	return nil
}

type DeletePostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PostId uint64 `protobuf:"varint,1,opt,name=post_id,json=postId,proto3" json:"post_id,omitempty"`
}

func (x *DeletePostRequest) Reset() {
	*x = DeletePostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_forum_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePostRequest) ProtoMessage() {}

func (x *DeletePostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_forum_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePostRequest.ProtoReflect.Descriptor instead.
func (*DeletePostRequest) Descriptor() ([]byte, []int) {
	return file_v1_forum_proto_rawDescGZIP(), []int{35}
}

func (x *DeletePostRequest) GetPostId() uint64 {
	if x != nil {
		return x.PostId
	}
	return 0
}

type DeletePostReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Succeed bool `protobuf:"varint,1,opt,name=succeed,proto3" json:"succeed,omitempty"`
}

func (x *DeletePostReply) Reset() {
	*x = DeletePostReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_forum_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePostReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePostReply) ProtoMessage() {}

func (x *DeletePostReply) ProtoReflect() protoreflect.Message {
	mi := &file_v1_forum_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePostReply.ProtoReflect.Descriptor instead.
func (*DeletePostReply) Descriptor() ([]byte, []int) {
	return file_v1_forum_proto_rawDescGZIP(), []int{36}
}

func (x *DeletePostReply) GetSucceed() bool {
	if x != nil {
		return x.Succeed
	}
	return false
}

var File_v1_forum_proto protoreflect.FileDescriptor

var file_v1_forum_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x76, 0x31, 0x2f, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0c, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x37, 0x0a, 0x11, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x3a, 0x0a, 0x14, 0x53, 0x75, 0x62, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x35, 0x0a, 0x0f, 0x54,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0xdf, 0x01, 0x0a, 0x0f, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x42, 0x72, 0x69,
	0x65, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x12, 0x3f, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x65, 0x22, 0xb2, 0x01, 0x0a, 0x0a, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x12, 0x3a, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x05, 0x70, 0x6f, 0x73,
	0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66,
	0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x50, 0x6f,
	0x73, 0x74, 0x52, 0x05, 0x70, 0x6f, 0x73, 0x74, 0x73, 0x22, 0xb4, 0x01, 0x0a, 0x08, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x37, 0x0a, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x65,
	0x22, 0xdb, 0x01, 0x0a, 0x0a, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x2a, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xfa, 0x42,
	0x08, 0x72, 0x06, 0x10, 0x04, 0x18, 0xa8, 0xc3, 0x01, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6f,
	0x72, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x64,
	0x0a, 0x12, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x72, 0x06, 0x10, 0x04, 0x18, 0xa8,
	0xc3, 0x01, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x04, 0x52, 0x0e, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x49, 0x64, 0x73, 0x22, 0x6c, 0x0a, 0x0a, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69,
	0x6e, 0x6b, 0x22, 0x3c, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x36, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x22, 0x35, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x22,
	0x9c, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x3e, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66,
	0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x62, 0x61, 0x73, 0x69, 0x63,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x48, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0d, 0x73, 0x75, 0x62, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x22, 0x38,
	0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x22, 0x2f, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x22, 0x19, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x58, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3f, 0x0a,
	0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x22, 0x71,
	0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x3f, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x75, 0x62, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x49, 0x64, 0x22, 0x3e, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x75, 0x62, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x49, 0x64, 0x22, 0xc9, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x41, 0x0a, 0x0a, 0x62, 0x61,
	0x73, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75,
	0x62, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x09, 0x62, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x70, 0x61, 0x67, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x07, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6f, 0x72,
	0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x42, 0x72, 0x69, 0x65,
	0x66, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x22, 0x41,
	0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x75,
	0x62, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49,
	0x64, 0x22, 0x32, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x65, 0x64, 0x22, 0x8e, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6f,
	0x72, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x50, 0x6f, 0x73,
	0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x30, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64, 0x22, 0x2f, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x54,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64, 0x22, 0xba, 0x01, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3c, 0x0a, 0x0a,
	0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x09, 0x62, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3a, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x05, 0x70, 0x6f, 0x73, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6f, 0x72, 0x75,
	0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x52,
	0x05, 0x70, 0x6f, 0x73, 0x74, 0x73, 0x22, 0x32, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64, 0x22, 0x2d, 0x0a, 0x11, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x22, 0x69, 0x0a, 0x14, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x54, 0x6f, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64, 0x12, 0x34,
	0x0a, 0x04, 0x70, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04,
	0x70, 0x6f, 0x73, 0x74, 0x22, 0x2e, 0x0a, 0x12, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x54,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x65, 0x64, 0x22, 0x51, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x28,
	0x02, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0x45, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x54, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2e,
	0x0a, 0x05, 0x70, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x05, 0x70, 0x6f, 0x73, 0x74, 0x73, 0x22, 0x27,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x22, 0x43, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4c, 0x61,
	0x73, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2e, 0x0a, 0x05,
	0x70, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x05, 0x70, 0x6f, 0x73, 0x74, 0x73, 0x22, 0x2c, 0x0a, 0x11,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x22, 0x2b, 0x0a, 0x0f, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x32, 0xde, 0x0d, 0x0a, 0x05, 0x46, 0x6f, 0x72, 0x75,
	0x6d, 0x12, 0x7b, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x12, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66,
	0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x21, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1b, 0x22, 0x16, 0x2f, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2f, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x76,
	0x0a, 0x0b, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x20, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x12, 0x1d, 0x2f, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2f,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2f, 0x7b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x7f, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66,
	0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x2a, 0x1d, 0x2f, 0x66, 0x6f, 0x72, 0x75, 0x6d,
	0x2f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2f, 0x7b, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x7d, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x25, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12,
	0x15, 0x2f, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x2f, 0x61, 0x6c, 0x6c, 0x12, 0x87, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x75, 0x62, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x26, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x75, 0x62, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1e, 0x22, 0x19, 0x2f, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2f, 0x73, 0x75, 0x62, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a,
	0x12, 0x85, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x12, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66,
	0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x25, 0x12, 0x23, 0x2f, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2f, 0x73, 0x75, 0x62, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2f, 0x7b, 0x73, 0x75, 0x62, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x8e, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x26,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6f, 0x72,
	0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2b, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x25, 0x2a, 0x23, 0x2f, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2f, 0x73, 0x75, 0x62,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2f, 0x7b, 0x73, 0x75, 0x62, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x73, 0x0a, 0x0c, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1f, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x19, 0x22, 0x14, 0x2f, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2f, 0x74, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x6c,
	0x0a, 0x09, 0x47, 0x65, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x1e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1b, 0x12, 0x19, 0x2f, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x2f, 0x7b, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x81, 0x01, 0x0a,
	0x0d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x22,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x54, 0x6f, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x22, 0x1f, 0x2f, 0x66,
	0x6f, 0x72, 0x75, 0x6d, 0x2f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x2f, 0x7b, 0x74, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x3a, 0x01, 0x2a,
	0x12, 0x82, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x50, 0x6f,
	0x73, 0x74, 0x73, 0x12, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x50, 0x6f, 0x73, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66,
	0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x28, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2f, 0x74, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x2f, 0x7b, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x7b,
	0x70, 0x61, 0x67, 0x65, 0x7d, 0x12, 0x6d, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74,
	0x50, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6f, 0x72, 0x75,
	0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x6f, 0x73, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66,
	0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x50,
	0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x13, 0x12, 0x11, 0x2f, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2f, 0x70, 0x6f, 0x73, 0x74, 0x73, 0x2f,
	0x6c, 0x61, 0x73, 0x74, 0x12, 0x75, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x12, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6f,
	0x72, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b,
	0x2a, 0x19, 0x2f, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x2f,
	0x7b, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x6b, 0x0a, 0x0a, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x17, 0x2a, 0x15, 0x2f, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2f, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x7b,
	0x70, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x42, 0x33, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x6b, 0x69, 0x6a, 0x65, 0x74, 0x6c, 0x65, 0x72,
	0x2f, 0x61, 0x6c, 0x70, 0x68, 0x69, 0x6e, 0x69, 0x75, 0x6d, 0x2f, 0x66, 0x6f, 0x72, 0x75, 0x6d,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_v1_forum_proto_rawDescOnce sync.Once
	file_v1_forum_proto_rawDescData = file_v1_forum_proto_rawDesc
)

func file_v1_forum_proto_rawDescGZIP() []byte {
	file_v1_forum_proto_rawDescOnce.Do(func() {
		file_v1_forum_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_forum_proto_rawDescData)
	})
	return file_v1_forum_proto_rawDescData
}

var file_v1_forum_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_v1_forum_proto_goTypes = []interface{}{
	(*CategoryBasicInfo)(nil),        // 0: api.forum.v1.CategoryBasicInfo
	(*SubcategoryBasicInfo)(nil),     // 1: api.forum.v1.SubcategoryBasicInfo
	(*ThreadBasicInfo)(nil),          // 2: api.forum.v1.ThreadBasicInfo
	(*ThreadBriefInfo)(nil),          // 3: api.forum.v1.ThreadBriefInfo
	(*ThreadInfo)(nil),               // 4: api.forum.v1.ThreadInfo
	(*UserInfo)(nil),                 // 5: api.forum.v1.UserInfo
	(*ThreadPost)(nil),               // 6: api.forum.v1.ThreadPost
	(*ThreadPostCreation)(nil),       // 7: api.forum.v1.ThreadPostCreation
	(*Attachment)(nil),               // 8: api.forum.v1.Attachment
	(*CreateCategoryRequest)(nil),    // 9: api.forum.v1.CreateCategoryRequest
	(*CreateCategoryReply)(nil),      // 10: api.forum.v1.CreateCategoryReply
	(*GetCategoryRequest)(nil),       // 11: api.forum.v1.GetCategoryRequest
	(*GetCategoryReply)(nil),         // 12: api.forum.v1.GetCategoryReply
	(*DeleteCategoryRequest)(nil),    // 13: api.forum.v1.DeleteCategoryRequest
	(*DeleteCategoryReply)(nil),      // 14: api.forum.v1.DeleteCategoryReply
	(*GetAllCategoriesRequest)(nil),  // 15: api.forum.v1.GetAllCategoriesRequest
	(*GetAllCategoriesReply)(nil),    // 16: api.forum.v1.GetAllCategoriesReply
	(*CreateSubcategoryRequest)(nil), // 17: api.forum.v1.CreateSubcategoryRequest
	(*CreateSubcategoryReply)(nil),   // 18: api.forum.v1.CreateSubcategoryReply
	(*GetSubcategoryRequest)(nil),    // 19: api.forum.v1.GetSubcategoryRequest
	(*GetSubcategoryReply)(nil),      // 20: api.forum.v1.GetSubcategoryReply
	(*DeleteSubcategoryRequest)(nil), // 21: api.forum.v1.DeleteSubcategoryRequest
	(*DeleteSubcategoryReply)(nil),   // 22: api.forum.v1.DeleteSubcategoryReply
	(*CreateThreadRequest)(nil),      // 23: api.forum.v1.CreateThreadRequest
	(*CreateThreadReply)(nil),        // 24: api.forum.v1.CreateThreadReply
	(*GetThreadRequest)(nil),         // 25: api.forum.v1.GetThreadRequest
	(*GetThreadReply)(nil),           // 26: api.forum.v1.GetThreadReply
	(*DeleteThreadRequest)(nil),      // 27: api.forum.v1.DeleteThreadRequest
	(*DeleteThreadReply)(nil),        // 28: api.forum.v1.DeleteThreadReply
	(*ReplyToThreadRequest)(nil),     // 29: api.forum.v1.ReplyToThreadRequest
	(*ReplyToThreadReply)(nil),       // 30: api.forum.v1.ReplyToThreadReply
	(*GetThreadPostsRequest)(nil),    // 31: api.forum.v1.GetThreadPostsRequest
	(*GetThreadPostsReply)(nil),      // 32: api.forum.v1.GetThreadPostsReply
	(*GetLastPostsRequest)(nil),      // 33: api.forum.v1.GetLastPostsRequest
	(*GetLastPostsReply)(nil),        // 34: api.forum.v1.GetLastPostsReply
	(*DeletePostRequest)(nil),        // 35: api.forum.v1.DeletePostRequest
	(*DeletePostReply)(nil),          // 36: api.forum.v1.DeletePostReply
	(*timestamppb.Timestamp)(nil),    // 37: google.protobuf.Timestamp
}
var file_v1_forum_proto_depIdxs = []int32{
	37, // 0: api.forum.v1.ThreadBriefInfo.creation_date:type_name -> google.protobuf.Timestamp
	6,  // 1: api.forum.v1.ThreadInfo.description:type_name -> api.forum.v1.ThreadPost
	6,  // 2: api.forum.v1.ThreadInfo.posts:type_name -> api.forum.v1.ThreadPost
	37, // 3: api.forum.v1.UserInfo.join_date:type_name -> google.protobuf.Timestamp
	5,  // 4: api.forum.v1.ThreadPost.user:type_name -> api.forum.v1.UserInfo
	37, // 5: api.forum.v1.ThreadPost.date:type_name -> google.protobuf.Timestamp
	8,  // 6: api.forum.v1.ThreadPost.attachments:type_name -> api.forum.v1.Attachment
	0,  // 7: api.forum.v1.GetCategoryReply.basic_info:type_name -> api.forum.v1.CategoryBasicInfo
	1,  // 8: api.forum.v1.GetCategoryReply.subcategories:type_name -> api.forum.v1.SubcategoryBasicInfo
	0,  // 9: api.forum.v1.GetAllCategoriesReply.categories:type_name -> api.forum.v1.CategoryBasicInfo
	1,  // 10: api.forum.v1.GetSubcategoryReply.basic_info:type_name -> api.forum.v1.SubcategoryBasicInfo
	3,  // 11: api.forum.v1.GetSubcategoryReply.threads:type_name -> api.forum.v1.ThreadBriefInfo
	7,  // 12: api.forum.v1.CreateThreadRequest.description:type_name -> api.forum.v1.ThreadPostCreation
	2,  // 13: api.forum.v1.GetThreadReply.basic_info:type_name -> api.forum.v1.ThreadBasicInfo
	6,  // 14: api.forum.v1.GetThreadReply.description:type_name -> api.forum.v1.ThreadPost
	6,  // 15: api.forum.v1.GetThreadReply.posts:type_name -> api.forum.v1.ThreadPost
	7,  // 16: api.forum.v1.ReplyToThreadRequest.post:type_name -> api.forum.v1.ThreadPostCreation
	6,  // 17: api.forum.v1.GetThreadPostsReply.posts:type_name -> api.forum.v1.ThreadPost
	6,  // 18: api.forum.v1.GetLastPostsReply.posts:type_name -> api.forum.v1.ThreadPost
	9,  // 19: api.forum.v1.Forum.CreateCategory:input_type -> api.forum.v1.CreateCategoryRequest
	11, // 20: api.forum.v1.Forum.GetCategory:input_type -> api.forum.v1.GetCategoryRequest
	13, // 21: api.forum.v1.Forum.DeleteCategory:input_type -> api.forum.v1.DeleteCategoryRequest
	15, // 22: api.forum.v1.Forum.GetAllCategories:input_type -> api.forum.v1.GetAllCategoriesRequest
	17, // 23: api.forum.v1.Forum.CreateSubcategory:input_type -> api.forum.v1.CreateSubcategoryRequest
	19, // 24: api.forum.v1.Forum.GetSubcategory:input_type -> api.forum.v1.GetSubcategoryRequest
	21, // 25: api.forum.v1.Forum.DeleteSubcategory:input_type -> api.forum.v1.DeleteSubcategoryRequest
	23, // 26: api.forum.v1.Forum.CreateThread:input_type -> api.forum.v1.CreateThreadRequest
	25, // 27: api.forum.v1.Forum.GetThread:input_type -> api.forum.v1.GetThreadRequest
	29, // 28: api.forum.v1.Forum.ReplyToThread:input_type -> api.forum.v1.ReplyToThreadRequest
	31, // 29: api.forum.v1.Forum.GetThreadPosts:input_type -> api.forum.v1.GetThreadPostsRequest
	33, // 30: api.forum.v1.Forum.GetLastPosts:input_type -> api.forum.v1.GetLastPostsRequest
	27, // 31: api.forum.v1.Forum.DeleteThread:input_type -> api.forum.v1.DeleteThreadRequest
	35, // 32: api.forum.v1.Forum.DeletePost:input_type -> api.forum.v1.DeletePostRequest
	10, // 33: api.forum.v1.Forum.CreateCategory:output_type -> api.forum.v1.CreateCategoryReply
	12, // 34: api.forum.v1.Forum.GetCategory:output_type -> api.forum.v1.GetCategoryReply
	14, // 35: api.forum.v1.Forum.DeleteCategory:output_type -> api.forum.v1.DeleteCategoryReply
	16, // 36: api.forum.v1.Forum.GetAllCategories:output_type -> api.forum.v1.GetAllCategoriesReply
	18, // 37: api.forum.v1.Forum.CreateSubcategory:output_type -> api.forum.v1.CreateSubcategoryReply
	20, // 38: api.forum.v1.Forum.GetSubcategory:output_type -> api.forum.v1.GetSubcategoryReply
	22, // 39: api.forum.v1.Forum.DeleteSubcategory:output_type -> api.forum.v1.DeleteSubcategoryReply
	24, // 40: api.forum.v1.Forum.CreateThread:output_type -> api.forum.v1.CreateThreadReply
	26, // 41: api.forum.v1.Forum.GetThread:output_type -> api.forum.v1.GetThreadReply
	30, // 42: api.forum.v1.Forum.ReplyToThread:output_type -> api.forum.v1.ReplyToThreadReply
	32, // 43: api.forum.v1.Forum.GetThreadPosts:output_type -> api.forum.v1.GetThreadPostsReply
	34, // 44: api.forum.v1.Forum.GetLastPosts:output_type -> api.forum.v1.GetLastPostsReply
	28, // 45: api.forum.v1.Forum.DeleteThread:output_type -> api.forum.v1.DeleteThreadReply
	36, // 46: api.forum.v1.Forum.DeletePost:output_type -> api.forum.v1.DeletePostReply
	33, // [33:47] is the sub-list for method output_type
	19, // [19:33] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_v1_forum_proto_init() }
func file_v1_forum_proto_init() {
	if File_v1_forum_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_v1_forum_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryBasicInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_forum_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubcategoryBasicInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_forum_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThreadBasicInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_forum_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThreadBriefInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_forum_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThreadInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_forum_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_forum_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThreadPost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_forum_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThreadPostCreation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_forum_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Attachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_forum_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCategoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_forum_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCategoryReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_forum_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCategoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_forum_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCategoryReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_forum_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCategoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_forum_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCategoryReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_forum_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllCategoriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_forum_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllCategoriesReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_forum_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSubcategoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_forum_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSubcategoryReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_forum_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubcategoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_forum_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubcategoryReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_forum_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSubcategoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_forum_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSubcategoryReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_forum_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateThreadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_forum_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateThreadReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_forum_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetThreadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_forum_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetThreadReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_forum_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteThreadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_forum_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteThreadReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_forum_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyToThreadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_forum_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyToThreadReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_forum_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetThreadPostsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_forum_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetThreadPostsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_forum_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLastPostsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_forum_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLastPostsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_forum_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_forum_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePostReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_forum_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   37,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_v1_forum_proto_goTypes,
		DependencyIndexes: file_v1_forum_proto_depIdxs,
		MessageInfos:      file_v1_forum_proto_msgTypes,
	}.Build()
	File_v1_forum_proto = out.File
	file_v1_forum_proto_rawDesc = nil
	file_v1_forum_proto_goTypes = nil
	file_v1_forum_proto_depIdxs = nil
}
