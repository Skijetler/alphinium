// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/forum.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CategoryBasicInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CategoryBasicInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CategoryBasicInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CategoryBasicInfoMultiError, or nil if none found.
func (m *CategoryBasicInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *CategoryBasicInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return CategoryBasicInfoMultiError(errors)
	}

	return nil
}

// CategoryBasicInfoMultiError is an error wrapping multiple validation errors
// returned by CategoryBasicInfo.ValidateAll() if the designated constraints
// aren't met.
type CategoryBasicInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryBasicInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryBasicInfoMultiError) AllErrors() []error { return m }

// CategoryBasicInfoValidationError is the validation error returned by
// CategoryBasicInfo.Validate if the designated constraints aren't met.
type CategoryBasicInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryBasicInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryBasicInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryBasicInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryBasicInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryBasicInfoValidationError) ErrorName() string {
	return "CategoryBasicInfoValidationError"
}

// Error satisfies the builtin error interface
func (e CategoryBasicInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoryBasicInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryBasicInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryBasicInfoValidationError{}

// Validate checks the field values on SubcategoryBasicInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubcategoryBasicInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubcategoryBasicInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubcategoryBasicInfoMultiError, or nil if none found.
func (m *SubcategoryBasicInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *SubcategoryBasicInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return SubcategoryBasicInfoMultiError(errors)
	}

	return nil
}

// SubcategoryBasicInfoMultiError is an error wrapping multiple validation
// errors returned by SubcategoryBasicInfo.ValidateAll() if the designated
// constraints aren't met.
type SubcategoryBasicInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubcategoryBasicInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubcategoryBasicInfoMultiError) AllErrors() []error { return m }

// SubcategoryBasicInfoValidationError is the validation error returned by
// SubcategoryBasicInfo.Validate if the designated constraints aren't met.
type SubcategoryBasicInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubcategoryBasicInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubcategoryBasicInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubcategoryBasicInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubcategoryBasicInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubcategoryBasicInfoValidationError) ErrorName() string {
	return "SubcategoryBasicInfoValidationError"
}

// Error satisfies the builtin error interface
func (e SubcategoryBasicInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubcategoryBasicInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubcategoryBasicInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubcategoryBasicInfoValidationError{}

// Validate checks the field values on ThreadBasicInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ThreadBasicInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ThreadBasicInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ThreadBasicInfoMultiError, or nil if none found.
func (m *ThreadBasicInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *ThreadBasicInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return ThreadBasicInfoMultiError(errors)
	}

	return nil
}

// ThreadBasicInfoMultiError is an error wrapping multiple validation errors
// returned by ThreadBasicInfo.ValidateAll() if the designated constraints
// aren't met.
type ThreadBasicInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ThreadBasicInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ThreadBasicInfoMultiError) AllErrors() []error { return m }

// ThreadBasicInfoValidationError is the validation error returned by
// ThreadBasicInfo.Validate if the designated constraints aren't met.
type ThreadBasicInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ThreadBasicInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ThreadBasicInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ThreadBasicInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ThreadBasicInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ThreadBasicInfoValidationError) ErrorName() string { return "ThreadBasicInfoValidationError" }

// Error satisfies the builtin error interface
func (e ThreadBasicInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sThreadBasicInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ThreadBasicInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ThreadBasicInfoValidationError{}

// Validate checks the field values on ThreadBriefInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ThreadBriefInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ThreadBriefInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ThreadBriefInfoMultiError, or nil if none found.
func (m *ThreadBriefInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *ThreadBriefInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for CreatorId

	// no validation rules for CreatorName

	// no validation rules for CreatorAvatar

	if all {
		switch v := interface{}(m.GetCreationDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ThreadBriefInfoValidationError{
					field:  "CreationDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ThreadBriefInfoValidationError{
					field:  "CreationDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreationDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ThreadBriefInfoValidationError{
				field:  "CreationDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ThreadBriefInfoMultiError(errors)
	}

	return nil
}

// ThreadBriefInfoMultiError is an error wrapping multiple validation errors
// returned by ThreadBriefInfo.ValidateAll() if the designated constraints
// aren't met.
type ThreadBriefInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ThreadBriefInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ThreadBriefInfoMultiError) AllErrors() []error { return m }

// ThreadBriefInfoValidationError is the validation error returned by
// ThreadBriefInfo.Validate if the designated constraints aren't met.
type ThreadBriefInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ThreadBriefInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ThreadBriefInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ThreadBriefInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ThreadBriefInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ThreadBriefInfoValidationError) ErrorName() string { return "ThreadBriefInfoValidationError" }

// Error satisfies the builtin error interface
func (e ThreadBriefInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sThreadBriefInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ThreadBriefInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ThreadBriefInfoValidationError{}

// Validate checks the field values on ThreadInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ThreadInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ThreadInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ThreadInfoMultiError, or
// nil if none found.
func (m *ThreadInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *ThreadInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Pages

	if all {
		switch v := interface{}(m.GetDescription()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ThreadInfoValidationError{
					field:  "Description",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ThreadInfoValidationError{
					field:  "Description",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDescription()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ThreadInfoValidationError{
				field:  "Description",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetPosts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ThreadInfoValidationError{
						field:  fmt.Sprintf("Posts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ThreadInfoValidationError{
						field:  fmt.Sprintf("Posts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ThreadInfoValidationError{
					field:  fmt.Sprintf("Posts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ThreadInfoMultiError(errors)
	}

	return nil
}

// ThreadInfoMultiError is an error wrapping multiple validation errors
// returned by ThreadInfo.ValidateAll() if the designated constraints aren't met.
type ThreadInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ThreadInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ThreadInfoMultiError) AllErrors() []error { return m }

// ThreadInfoValidationError is the validation error returned by
// ThreadInfo.Validate if the designated constraints aren't met.
type ThreadInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ThreadInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ThreadInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ThreadInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ThreadInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ThreadInfoValidationError) ErrorName() string { return "ThreadInfoValidationError" }

// Error satisfies the builtin error interface
func (e ThreadInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sThreadInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ThreadInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ThreadInfoValidationError{}

// Validate checks the field values on UserInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserInfoMultiError, or nil
// if none found.
func (m *UserInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *UserInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for NameColor

	// no validation rules for Title

	// no validation rules for Avatar

	if all {
		switch v := interface{}(m.GetJoinDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserInfoValidationError{
					field:  "JoinDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserInfoValidationError{
					field:  "JoinDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetJoinDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserInfoValidationError{
				field:  "JoinDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserInfoMultiError(errors)
	}

	return nil
}

// UserInfoMultiError is an error wrapping multiple validation errors returned
// by UserInfo.ValidateAll() if the designated constraints aren't met.
type UserInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserInfoMultiError) AllErrors() []error { return m }

// UserInfoValidationError is the validation error returned by
// UserInfo.Validate if the designated constraints aren't met.
type UserInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserInfoValidationError) ErrorName() string { return "UserInfoValidationError" }

// Error satisfies the builtin error interface
func (e UserInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserInfoValidationError{}

// Validate checks the field values on ThreadPost with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ThreadPost) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ThreadPost with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ThreadPostMultiError, or
// nil if none found.
func (m *ThreadPost) ValidateAll() error {
	return m.validate(true)
}

func (m *ThreadPost) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ThreadPostValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ThreadPostValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ThreadPostValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := utf8.RuneCountInString(m.GetMessage()); l < 4 || l > 25000 {
		err := ThreadPostValidationError{
			field:  "Message",
			reason: "value length must be between 4 and 25000 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ThreadPostValidationError{
					field:  "Date",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ThreadPostValidationError{
					field:  "Date",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ThreadPostValidationError{
				field:  "Date",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetAttachments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ThreadPostValidationError{
						field:  fmt.Sprintf("Attachments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ThreadPostValidationError{
						field:  fmt.Sprintf("Attachments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ThreadPostValidationError{
					field:  fmt.Sprintf("Attachments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ThreadPostMultiError(errors)
	}

	return nil
}

// ThreadPostMultiError is an error wrapping multiple validation errors
// returned by ThreadPost.ValidateAll() if the designated constraints aren't met.
type ThreadPostMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ThreadPostMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ThreadPostMultiError) AllErrors() []error { return m }

// ThreadPostValidationError is the validation error returned by
// ThreadPost.Validate if the designated constraints aren't met.
type ThreadPostValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ThreadPostValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ThreadPostValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ThreadPostValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ThreadPostValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ThreadPostValidationError) ErrorName() string { return "ThreadPostValidationError" }

// Error satisfies the builtin error interface
func (e ThreadPostValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sThreadPost.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ThreadPostValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ThreadPostValidationError{}

// Validate checks the field values on ThreadPostCreation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ThreadPostCreation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ThreadPostCreation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ThreadPostCreationMultiError, or nil if none found.
func (m *ThreadPostCreation) ValidateAll() error {
	return m.validate(true)
}

func (m *ThreadPostCreation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetMessage()); l < 4 || l > 25000 {
		err := ThreadPostCreationValidationError{
			field:  "Message",
			reason: "value length must be between 4 and 25000 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ThreadPostCreationMultiError(errors)
	}

	return nil
}

// ThreadPostCreationMultiError is an error wrapping multiple validation errors
// returned by ThreadPostCreation.ValidateAll() if the designated constraints
// aren't met.
type ThreadPostCreationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ThreadPostCreationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ThreadPostCreationMultiError) AllErrors() []error { return m }

// ThreadPostCreationValidationError is the validation error returned by
// ThreadPostCreation.Validate if the designated constraints aren't met.
type ThreadPostCreationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ThreadPostCreationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ThreadPostCreationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ThreadPostCreationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ThreadPostCreationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ThreadPostCreationValidationError) ErrorName() string {
	return "ThreadPostCreationValidationError"
}

// Error satisfies the builtin error interface
func (e ThreadPostCreationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sThreadPostCreation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ThreadPostCreationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ThreadPostCreationValidationError{}

// Validate checks the field values on Attachment with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Attachment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Attachment with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AttachmentMultiError, or
// nil if none found.
func (m *Attachment) ValidateAll() error {
	return m.validate(true)
}

func (m *Attachment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Size

	// no validation rules for Type

	// no validation rules for Link

	if len(errors) > 0 {
		return AttachmentMultiError(errors)
	}

	return nil
}

// AttachmentMultiError is an error wrapping multiple validation errors
// returned by Attachment.ValidateAll() if the designated constraints aren't met.
type AttachmentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AttachmentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AttachmentMultiError) AllErrors() []error { return m }

// AttachmentValidationError is the validation error returned by
// Attachment.Validate if the designated constraints aren't met.
type AttachmentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttachmentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttachmentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttachmentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttachmentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttachmentValidationError) ErrorName() string { return "AttachmentValidationError" }

// Error satisfies the builtin error interface
func (e AttachmentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttachment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttachmentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttachmentValidationError{}

// Validate checks the field values on CreateCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCategoryRequestMultiError, or nil if none found.
func (m *CreateCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CategoryName

	if len(errors) > 0 {
		return CreateCategoryRequestMultiError(errors)
	}

	return nil
}

// CreateCategoryRequestMultiError is an error wrapping multiple validation
// errors returned by CreateCategoryRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCategoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCategoryRequestMultiError) AllErrors() []error { return m }

// CreateCategoryRequestValidationError is the validation error returned by
// CreateCategoryRequest.Validate if the designated constraints aren't met.
type CreateCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCategoryRequestValidationError) ErrorName() string {
	return "CreateCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCategoryRequestValidationError{}

// Validate checks the field values on CreateCategoryReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCategoryReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCategoryReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCategoryReplyMultiError, or nil if none found.
func (m *CreateCategoryReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCategoryReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CategoryId

	if len(errors) > 0 {
		return CreateCategoryReplyMultiError(errors)
	}

	return nil
}

// CreateCategoryReplyMultiError is an error wrapping multiple validation
// errors returned by CreateCategoryReply.ValidateAll() if the designated
// constraints aren't met.
type CreateCategoryReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCategoryReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCategoryReplyMultiError) AllErrors() []error { return m }

// CreateCategoryReplyValidationError is the validation error returned by
// CreateCategoryReply.Validate if the designated constraints aren't met.
type CreateCategoryReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCategoryReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCategoryReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCategoryReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCategoryReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCategoryReplyValidationError) ErrorName() string {
	return "CreateCategoryReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCategoryReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCategoryReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCategoryReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCategoryReplyValidationError{}

// Validate checks the field values on GetCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCategoryRequestMultiError, or nil if none found.
func (m *GetCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CategoryId

	if len(errors) > 0 {
		return GetCategoryRequestMultiError(errors)
	}

	return nil
}

// GetCategoryRequestMultiError is an error wrapping multiple validation errors
// returned by GetCategoryRequest.ValidateAll() if the designated constraints
// aren't met.
type GetCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCategoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCategoryRequestMultiError) AllErrors() []error { return m }

// GetCategoryRequestValidationError is the validation error returned by
// GetCategoryRequest.Validate if the designated constraints aren't met.
type GetCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCategoryRequestValidationError) ErrorName() string {
	return "GetCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCategoryRequestValidationError{}

// Validate checks the field values on GetCategoryReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetCategoryReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCategoryReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCategoryReplyMultiError, or nil if none found.
func (m *GetCategoryReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCategoryReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBasicInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCategoryReplyValidationError{
					field:  "BasicInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCategoryReplyValidationError{
					field:  "BasicInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBasicInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCategoryReplyValidationError{
				field:  "BasicInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetSubcategories() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCategoryReplyValidationError{
						field:  fmt.Sprintf("Subcategories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCategoryReplyValidationError{
						field:  fmt.Sprintf("Subcategories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCategoryReplyValidationError{
					field:  fmt.Sprintf("Subcategories[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetCategoryReplyMultiError(errors)
	}

	return nil
}

// GetCategoryReplyMultiError is an error wrapping multiple validation errors
// returned by GetCategoryReply.ValidateAll() if the designated constraints
// aren't met.
type GetCategoryReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCategoryReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCategoryReplyMultiError) AllErrors() []error { return m }

// GetCategoryReplyValidationError is the validation error returned by
// GetCategoryReply.Validate if the designated constraints aren't met.
type GetCategoryReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCategoryReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCategoryReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCategoryReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCategoryReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCategoryReplyValidationError) ErrorName() string { return "GetCategoryReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetCategoryReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCategoryReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCategoryReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCategoryReplyValidationError{}

// Validate checks the field values on DeleteCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCategoryRequestMultiError, or nil if none found.
func (m *DeleteCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CategoryId

	if len(errors) > 0 {
		return DeleteCategoryRequestMultiError(errors)
	}

	return nil
}

// DeleteCategoryRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteCategoryRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCategoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCategoryRequestMultiError) AllErrors() []error { return m }

// DeleteCategoryRequestValidationError is the validation error returned by
// DeleteCategoryRequest.Validate if the designated constraints aren't met.
type DeleteCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCategoryRequestValidationError) ErrorName() string {
	return "DeleteCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCategoryRequestValidationError{}

// Validate checks the field values on DeleteCategoryReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCategoryReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCategoryReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCategoryReplyMultiError, or nil if none found.
func (m *DeleteCategoryReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCategoryReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Succeed

	if len(errors) > 0 {
		return DeleteCategoryReplyMultiError(errors)
	}

	return nil
}

// DeleteCategoryReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteCategoryReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteCategoryReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCategoryReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCategoryReplyMultiError) AllErrors() []error { return m }

// DeleteCategoryReplyValidationError is the validation error returned by
// DeleteCategoryReply.Validate if the designated constraints aren't met.
type DeleteCategoryReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCategoryReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCategoryReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCategoryReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCategoryReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCategoryReplyValidationError) ErrorName() string {
	return "DeleteCategoryReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCategoryReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCategoryReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCategoryReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCategoryReplyValidationError{}

// Validate checks the field values on GetAllCategoriesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllCategoriesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllCategoriesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllCategoriesRequestMultiError, or nil if none found.
func (m *GetAllCategoriesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllCategoriesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetAllCategoriesRequestMultiError(errors)
	}

	return nil
}

// GetAllCategoriesRequestMultiError is an error wrapping multiple validation
// errors returned by GetAllCategoriesRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAllCategoriesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllCategoriesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllCategoriesRequestMultiError) AllErrors() []error { return m }

// GetAllCategoriesRequestValidationError is the validation error returned by
// GetAllCategoriesRequest.Validate if the designated constraints aren't met.
type GetAllCategoriesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllCategoriesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllCategoriesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllCategoriesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllCategoriesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllCategoriesRequestValidationError) ErrorName() string {
	return "GetAllCategoriesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllCategoriesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllCategoriesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllCategoriesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllCategoriesRequestValidationError{}

// Validate checks the field values on GetAllCategoriesReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllCategoriesReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllCategoriesReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllCategoriesReplyMultiError, or nil if none found.
func (m *GetAllCategoriesReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllCategoriesReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCategories() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAllCategoriesReplyValidationError{
						field:  fmt.Sprintf("Categories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAllCategoriesReplyValidationError{
						field:  fmt.Sprintf("Categories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAllCategoriesReplyValidationError{
					field:  fmt.Sprintf("Categories[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAllCategoriesReplyMultiError(errors)
	}

	return nil
}

// GetAllCategoriesReplyMultiError is an error wrapping multiple validation
// errors returned by GetAllCategoriesReply.ValidateAll() if the designated
// constraints aren't met.
type GetAllCategoriesReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllCategoriesReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllCategoriesReplyMultiError) AllErrors() []error { return m }

// GetAllCategoriesReplyValidationError is the validation error returned by
// GetAllCategoriesReply.Validate if the designated constraints aren't met.
type GetAllCategoriesReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllCategoriesReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllCategoriesReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllCategoriesReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllCategoriesReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllCategoriesReplyValidationError) ErrorName() string {
	return "GetAllCategoriesReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllCategoriesReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllCategoriesReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllCategoriesReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllCategoriesReplyValidationError{}

// Validate checks the field values on CreateSubcategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSubcategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSubcategoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSubcategoryRequestMultiError, or nil if none found.
func (m *CreateSubcategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSubcategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CategoryId

	// no validation rules for Name

	// no validation rules for Description

	if len(errors) > 0 {
		return CreateSubcategoryRequestMultiError(errors)
	}

	return nil
}

// CreateSubcategoryRequestMultiError is an error wrapping multiple validation
// errors returned by CreateSubcategoryRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateSubcategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSubcategoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSubcategoryRequestMultiError) AllErrors() []error { return m }

// CreateSubcategoryRequestValidationError is the validation error returned by
// CreateSubcategoryRequest.Validate if the designated constraints aren't met.
type CreateSubcategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSubcategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSubcategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSubcategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSubcategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSubcategoryRequestValidationError) ErrorName() string {
	return "CreateSubcategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSubcategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSubcategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSubcategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSubcategoryRequestValidationError{}

// Validate checks the field values on CreateSubcategoryReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSubcategoryReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSubcategoryReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSubcategoryReplyMultiError, or nil if none found.
func (m *CreateSubcategoryReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSubcategoryReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SubcategoryId

	if len(errors) > 0 {
		return CreateSubcategoryReplyMultiError(errors)
	}

	return nil
}

// CreateSubcategoryReplyMultiError is an error wrapping multiple validation
// errors returned by CreateSubcategoryReply.ValidateAll() if the designated
// constraints aren't met.
type CreateSubcategoryReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSubcategoryReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSubcategoryReplyMultiError) AllErrors() []error { return m }

// CreateSubcategoryReplyValidationError is the validation error returned by
// CreateSubcategoryReply.Validate if the designated constraints aren't met.
type CreateSubcategoryReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSubcategoryReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSubcategoryReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSubcategoryReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSubcategoryReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSubcategoryReplyValidationError) ErrorName() string {
	return "CreateSubcategoryReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSubcategoryReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSubcategoryReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSubcategoryReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSubcategoryReplyValidationError{}

// Validate checks the field values on GetSubcategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSubcategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSubcategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSubcategoryRequestMultiError, or nil if none found.
func (m *GetSubcategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSubcategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SubcategoryId

	if len(errors) > 0 {
		return GetSubcategoryRequestMultiError(errors)
	}

	return nil
}

// GetSubcategoryRequestMultiError is an error wrapping multiple validation
// errors returned by GetSubcategoryRequest.ValidateAll() if the designated
// constraints aren't met.
type GetSubcategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSubcategoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSubcategoryRequestMultiError) AllErrors() []error { return m }

// GetSubcategoryRequestValidationError is the validation error returned by
// GetSubcategoryRequest.Validate if the designated constraints aren't met.
type GetSubcategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSubcategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSubcategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSubcategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSubcategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSubcategoryRequestValidationError) ErrorName() string {
	return "GetSubcategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSubcategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSubcategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSubcategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSubcategoryRequestValidationError{}

// Validate checks the field values on GetSubcategoryReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSubcategoryReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSubcategoryReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSubcategoryReplyMultiError, or nil if none found.
func (m *GetSubcategoryReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSubcategoryReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBasicInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSubcategoryReplyValidationError{
					field:  "BasicInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSubcategoryReplyValidationError{
					field:  "BasicInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBasicInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSubcategoryReplyValidationError{
				field:  "BasicInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Description

	// no validation rules for Pages

	for idx, item := range m.GetThreads() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSubcategoryReplyValidationError{
						field:  fmt.Sprintf("Threads[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSubcategoryReplyValidationError{
						field:  fmt.Sprintf("Threads[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSubcategoryReplyValidationError{
					field:  fmt.Sprintf("Threads[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetSubcategoryReplyMultiError(errors)
	}

	return nil
}

// GetSubcategoryReplyMultiError is an error wrapping multiple validation
// errors returned by GetSubcategoryReply.ValidateAll() if the designated
// constraints aren't met.
type GetSubcategoryReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSubcategoryReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSubcategoryReplyMultiError) AllErrors() []error { return m }

// GetSubcategoryReplyValidationError is the validation error returned by
// GetSubcategoryReply.Validate if the designated constraints aren't met.
type GetSubcategoryReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSubcategoryReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSubcategoryReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSubcategoryReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSubcategoryReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSubcategoryReplyValidationError) ErrorName() string {
	return "GetSubcategoryReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetSubcategoryReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSubcategoryReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSubcategoryReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSubcategoryReplyValidationError{}

// Validate checks the field values on DeleteSubcategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSubcategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSubcategoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSubcategoryRequestMultiError, or nil if none found.
func (m *DeleteSubcategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSubcategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SubcategoryId

	if len(errors) > 0 {
		return DeleteSubcategoryRequestMultiError(errors)
	}

	return nil
}

// DeleteSubcategoryRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteSubcategoryRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteSubcategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSubcategoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSubcategoryRequestMultiError) AllErrors() []error { return m }

// DeleteSubcategoryRequestValidationError is the validation error returned by
// DeleteSubcategoryRequest.Validate if the designated constraints aren't met.
type DeleteSubcategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSubcategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSubcategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSubcategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSubcategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSubcategoryRequestValidationError) ErrorName() string {
	return "DeleteSubcategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSubcategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSubcategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSubcategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSubcategoryRequestValidationError{}

// Validate checks the field values on DeleteSubcategoryReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSubcategoryReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSubcategoryReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSubcategoryReplyMultiError, or nil if none found.
func (m *DeleteSubcategoryReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSubcategoryReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Succeed

	if len(errors) > 0 {
		return DeleteSubcategoryReplyMultiError(errors)
	}

	return nil
}

// DeleteSubcategoryReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteSubcategoryReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteSubcategoryReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSubcategoryReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSubcategoryReplyMultiError) AllErrors() []error { return m }

// DeleteSubcategoryReplyValidationError is the validation error returned by
// DeleteSubcategoryReply.Validate if the designated constraints aren't met.
type DeleteSubcategoryReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSubcategoryReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSubcategoryReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSubcategoryReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSubcategoryReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSubcategoryReplyValidationError) ErrorName() string {
	return "DeleteSubcategoryReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSubcategoryReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSubcategoryReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSubcategoryReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSubcategoryReplyValidationError{}

// Validate checks the field values on CreateThreadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateThreadRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateThreadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateThreadRequestMultiError, or nil if none found.
func (m *CreateThreadRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateThreadRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CategoryId

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetDescription()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateThreadRequestValidationError{
					field:  "Description",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateThreadRequestValidationError{
					field:  "Description",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDescription()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateThreadRequestValidationError{
				field:  "Description",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateThreadRequestMultiError(errors)
	}

	return nil
}

// CreateThreadRequestMultiError is an error wrapping multiple validation
// errors returned by CreateThreadRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateThreadRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateThreadRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateThreadRequestMultiError) AllErrors() []error { return m }

// CreateThreadRequestValidationError is the validation error returned by
// CreateThreadRequest.Validate if the designated constraints aren't met.
type CreateThreadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateThreadRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateThreadRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateThreadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateThreadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateThreadRequestValidationError) ErrorName() string {
	return "CreateThreadRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateThreadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateThreadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateThreadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateThreadRequestValidationError{}

// Validate checks the field values on CreateThreadReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateThreadReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateThreadReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateThreadReplyMultiError, or nil if none found.
func (m *CreateThreadReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateThreadReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ThreadId

	if len(errors) > 0 {
		return CreateThreadReplyMultiError(errors)
	}

	return nil
}

// CreateThreadReplyMultiError is an error wrapping multiple validation errors
// returned by CreateThreadReply.ValidateAll() if the designated constraints
// aren't met.
type CreateThreadReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateThreadReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateThreadReplyMultiError) AllErrors() []error { return m }

// CreateThreadReplyValidationError is the validation error returned by
// CreateThreadReply.Validate if the designated constraints aren't met.
type CreateThreadReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateThreadReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateThreadReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateThreadReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateThreadReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateThreadReplyValidationError) ErrorName() string {
	return "CreateThreadReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateThreadReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateThreadReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateThreadReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateThreadReplyValidationError{}

// Validate checks the field values on GetThreadRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetThreadRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetThreadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetThreadRequestMultiError, or nil if none found.
func (m *GetThreadRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetThreadRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ThreadId

	if len(errors) > 0 {
		return GetThreadRequestMultiError(errors)
	}

	return nil
}

// GetThreadRequestMultiError is an error wrapping multiple validation errors
// returned by GetThreadRequest.ValidateAll() if the designated constraints
// aren't met.
type GetThreadRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetThreadRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetThreadRequestMultiError) AllErrors() []error { return m }

// GetThreadRequestValidationError is the validation error returned by
// GetThreadRequest.Validate if the designated constraints aren't met.
type GetThreadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetThreadRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetThreadRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetThreadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetThreadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetThreadRequestValidationError) ErrorName() string { return "GetThreadRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetThreadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetThreadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetThreadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetThreadRequestValidationError{}

// Validate checks the field values on GetThreadReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetThreadReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetThreadReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetThreadReplyMultiError,
// or nil if none found.
func (m *GetThreadReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetThreadReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBasicInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetThreadReplyValidationError{
					field:  "BasicInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetThreadReplyValidationError{
					field:  "BasicInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBasicInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetThreadReplyValidationError{
				field:  "BasicInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDescription()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetThreadReplyValidationError{
					field:  "Description",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetThreadReplyValidationError{
					field:  "Description",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDescription()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetThreadReplyValidationError{
				field:  "Description",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetPosts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetThreadReplyValidationError{
						field:  fmt.Sprintf("Posts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetThreadReplyValidationError{
						field:  fmt.Sprintf("Posts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetThreadReplyValidationError{
					field:  fmt.Sprintf("Posts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetThreadReplyMultiError(errors)
	}

	return nil
}

// GetThreadReplyMultiError is an error wrapping multiple validation errors
// returned by GetThreadReply.ValidateAll() if the designated constraints
// aren't met.
type GetThreadReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetThreadReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetThreadReplyMultiError) AllErrors() []error { return m }

// GetThreadReplyValidationError is the validation error returned by
// GetThreadReply.Validate if the designated constraints aren't met.
type GetThreadReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetThreadReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetThreadReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetThreadReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetThreadReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetThreadReplyValidationError) ErrorName() string { return "GetThreadReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetThreadReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetThreadReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetThreadReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetThreadReplyValidationError{}

// Validate checks the field values on DeleteThreadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteThreadRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteThreadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteThreadRequestMultiError, or nil if none found.
func (m *DeleteThreadRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteThreadRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ThreadId

	if len(errors) > 0 {
		return DeleteThreadRequestMultiError(errors)
	}

	return nil
}

// DeleteThreadRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteThreadRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteThreadRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteThreadRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteThreadRequestMultiError) AllErrors() []error { return m }

// DeleteThreadRequestValidationError is the validation error returned by
// DeleteThreadRequest.Validate if the designated constraints aren't met.
type DeleteThreadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteThreadRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteThreadRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteThreadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteThreadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteThreadRequestValidationError) ErrorName() string {
	return "DeleteThreadRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteThreadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteThreadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteThreadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteThreadRequestValidationError{}

// Validate checks the field values on DeleteThreadReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteThreadReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteThreadReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteThreadReplyMultiError, or nil if none found.
func (m *DeleteThreadReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteThreadReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Succeed

	if len(errors) > 0 {
		return DeleteThreadReplyMultiError(errors)
	}

	return nil
}

// DeleteThreadReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteThreadReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteThreadReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteThreadReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteThreadReplyMultiError) AllErrors() []error { return m }

// DeleteThreadReplyValidationError is the validation error returned by
// DeleteThreadReply.Validate if the designated constraints aren't met.
type DeleteThreadReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteThreadReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteThreadReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteThreadReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteThreadReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteThreadReplyValidationError) ErrorName() string {
	return "DeleteThreadReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteThreadReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteThreadReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteThreadReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteThreadReplyValidationError{}

// Validate checks the field values on ReplyToThreadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReplyToThreadRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReplyToThreadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReplyToThreadRequestMultiError, or nil if none found.
func (m *ReplyToThreadRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReplyToThreadRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ThreadId

	if all {
		switch v := interface{}(m.GetPost()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReplyToThreadRequestValidationError{
					field:  "Post",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReplyToThreadRequestValidationError{
					field:  "Post",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPost()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReplyToThreadRequestValidationError{
				field:  "Post",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReplyToThreadRequestMultiError(errors)
	}

	return nil
}

// ReplyToThreadRequestMultiError is an error wrapping multiple validation
// errors returned by ReplyToThreadRequest.ValidateAll() if the designated
// constraints aren't met.
type ReplyToThreadRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReplyToThreadRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReplyToThreadRequestMultiError) AllErrors() []error { return m }

// ReplyToThreadRequestValidationError is the validation error returned by
// ReplyToThreadRequest.Validate if the designated constraints aren't met.
type ReplyToThreadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReplyToThreadRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReplyToThreadRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReplyToThreadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReplyToThreadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReplyToThreadRequestValidationError) ErrorName() string {
	return "ReplyToThreadRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReplyToThreadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReplyToThreadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReplyToThreadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReplyToThreadRequestValidationError{}

// Validate checks the field values on ReplyToThreadReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReplyToThreadReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReplyToThreadReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReplyToThreadReplyMultiError, or nil if none found.
func (m *ReplyToThreadReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ReplyToThreadReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Succeed

	if len(errors) > 0 {
		return ReplyToThreadReplyMultiError(errors)
	}

	return nil
}

// ReplyToThreadReplyMultiError is an error wrapping multiple validation errors
// returned by ReplyToThreadReply.ValidateAll() if the designated constraints
// aren't met.
type ReplyToThreadReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReplyToThreadReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReplyToThreadReplyMultiError) AllErrors() []error { return m }

// ReplyToThreadReplyValidationError is the validation error returned by
// ReplyToThreadReply.Validate if the designated constraints aren't met.
type ReplyToThreadReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReplyToThreadReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReplyToThreadReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReplyToThreadReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReplyToThreadReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReplyToThreadReplyValidationError) ErrorName() string {
	return "ReplyToThreadReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ReplyToThreadReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReplyToThreadReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReplyToThreadReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReplyToThreadReplyValidationError{}

// Validate checks the field values on GetThreadPostsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetThreadPostsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetThreadPostsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetThreadPostsRequestMultiError, or nil if none found.
func (m *GetThreadPostsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetThreadPostsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ThreadId

	if m.GetPage() < 2 {
		err := GetThreadPostsRequestValidationError{
			field:  "Page",
			reason: "value must be greater than or equal to 2",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetThreadPostsRequestMultiError(errors)
	}

	return nil
}

// GetThreadPostsRequestMultiError is an error wrapping multiple validation
// errors returned by GetThreadPostsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetThreadPostsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetThreadPostsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetThreadPostsRequestMultiError) AllErrors() []error { return m }

// GetThreadPostsRequestValidationError is the validation error returned by
// GetThreadPostsRequest.Validate if the designated constraints aren't met.
type GetThreadPostsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetThreadPostsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetThreadPostsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetThreadPostsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetThreadPostsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetThreadPostsRequestValidationError) ErrorName() string {
	return "GetThreadPostsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetThreadPostsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetThreadPostsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetThreadPostsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetThreadPostsRequestValidationError{}

// Validate checks the field values on GetThreadPostsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetThreadPostsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetThreadPostsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetThreadPostsReplyMultiError, or nil if none found.
func (m *GetThreadPostsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetThreadPostsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPosts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetThreadPostsReplyValidationError{
						field:  fmt.Sprintf("Posts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetThreadPostsReplyValidationError{
						field:  fmt.Sprintf("Posts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetThreadPostsReplyValidationError{
					field:  fmt.Sprintf("Posts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetThreadPostsReplyMultiError(errors)
	}

	return nil
}

// GetThreadPostsReplyMultiError is an error wrapping multiple validation
// errors returned by GetThreadPostsReply.ValidateAll() if the designated
// constraints aren't met.
type GetThreadPostsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetThreadPostsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetThreadPostsReplyMultiError) AllErrors() []error { return m }

// GetThreadPostsReplyValidationError is the validation error returned by
// GetThreadPostsReply.Validate if the designated constraints aren't met.
type GetThreadPostsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetThreadPostsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetThreadPostsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetThreadPostsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetThreadPostsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetThreadPostsReplyValidationError) ErrorName() string {
	return "GetThreadPostsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetThreadPostsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetThreadPostsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetThreadPostsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetThreadPostsReplyValidationError{}

// Validate checks the field values on GetLastPostsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLastPostsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLastPostsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLastPostsRequestMultiError, or nil if none found.
func (m *GetLastPostsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLastPostsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Num

	if len(errors) > 0 {
		return GetLastPostsRequestMultiError(errors)
	}

	return nil
}

// GetLastPostsRequestMultiError is an error wrapping multiple validation
// errors returned by GetLastPostsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetLastPostsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLastPostsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLastPostsRequestMultiError) AllErrors() []error { return m }

// GetLastPostsRequestValidationError is the validation error returned by
// GetLastPostsRequest.Validate if the designated constraints aren't met.
type GetLastPostsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLastPostsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLastPostsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLastPostsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLastPostsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLastPostsRequestValidationError) ErrorName() string {
	return "GetLastPostsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetLastPostsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLastPostsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLastPostsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLastPostsRequestValidationError{}

// Validate checks the field values on GetLastPostsReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetLastPostsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLastPostsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLastPostsReplyMultiError, or nil if none found.
func (m *GetLastPostsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLastPostsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPosts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetLastPostsReplyValidationError{
						field:  fmt.Sprintf("Posts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetLastPostsReplyValidationError{
						field:  fmt.Sprintf("Posts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetLastPostsReplyValidationError{
					field:  fmt.Sprintf("Posts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetLastPostsReplyMultiError(errors)
	}

	return nil
}

// GetLastPostsReplyMultiError is an error wrapping multiple validation errors
// returned by GetLastPostsReply.ValidateAll() if the designated constraints
// aren't met.
type GetLastPostsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLastPostsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLastPostsReplyMultiError) AllErrors() []error { return m }

// GetLastPostsReplyValidationError is the validation error returned by
// GetLastPostsReply.Validate if the designated constraints aren't met.
type GetLastPostsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLastPostsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLastPostsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLastPostsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLastPostsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLastPostsReplyValidationError) ErrorName() string {
	return "GetLastPostsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetLastPostsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLastPostsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLastPostsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLastPostsReplyValidationError{}

// Validate checks the field values on DeletePostRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeletePostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePostRequestMultiError, or nil if none found.
func (m *DeletePostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PostId

	if len(errors) > 0 {
		return DeletePostRequestMultiError(errors)
	}

	return nil
}

// DeletePostRequestMultiError is an error wrapping multiple validation errors
// returned by DeletePostRequest.ValidateAll() if the designated constraints
// aren't met.
type DeletePostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePostRequestMultiError) AllErrors() []error { return m }

// DeletePostRequestValidationError is the validation error returned by
// DeletePostRequest.Validate if the designated constraints aren't met.
type DeletePostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePostRequestValidationError) ErrorName() string {
	return "DeletePostRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePostRequestValidationError{}

// Validate checks the field values on DeletePostReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeletePostReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePostReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePostReplyMultiError, or nil if none found.
func (m *DeletePostReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePostReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Succeed

	if len(errors) > 0 {
		return DeletePostReplyMultiError(errors)
	}

	return nil
}

// DeletePostReplyMultiError is an error wrapping multiple validation errors
// returned by DeletePostReply.ValidateAll() if the designated constraints
// aren't met.
type DeletePostReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePostReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePostReplyMultiError) AllErrors() []error { return m }

// DeletePostReplyValidationError is the validation error returned by
// DeletePostReply.Validate if the designated constraints aren't met.
type DeletePostReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePostReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePostReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePostReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePostReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePostReplyValidationError) ErrorName() string { return "DeletePostReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeletePostReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePostReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePostReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePostReplyValidationError{}
